<asdoc build="asd3_0_b2_1">
   <link rel="stylesheet" href="style.css" type="text/css"/>
   <packages>
      <asPackage name="cv.formats">
         <classes>
            <asClass name="M3U" type="class" fullname="cv.formats:M3U" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The M3U class parses M3U formatted playlist files and returns a PlayList.
  M3U is by far the most popular playlist format, probably due 
  to its simplicity. It is an ad-hoc standard with no formal definition, 
  no canonical source, and no owner.
     ]]></description>
               <shortDescription><![CDATA[
  The M3U class parses M3U formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="isValid" fullname="cv.formats:M3U/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:M3U/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="XSPF" type="class" fullname="cv.formats:XSPF" accessLevel="public" isFinal="false" isDynamic="true" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The XSPF class parses XSPF formatted playlist files and returns a PlayList.
  
  Read XSPF PlayLists
  
  MIME Type: application/xspf+xml
  ]]></description>
               <shortDescription><![CDATA[
  The XSPF class parses XSPF formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="isValid" fullname="cv.formats:XSPF/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:XSPF/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="ATOM" type="class" fullname="cv.formats:ATOM" accessLevel="public" isFinal="false" isDynamic="true" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The ATOM class parses ATOM formatted playlist files and returns a PlayList.
     ]]></description>
               <shortDescription><![CDATA[
  The ATOM class parses ATOM formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ATOM" fullname="cv.formats:ATOM/ATOM" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="isValid" fullname="cv.formats:ATOM/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:ATOM/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toSeconds" fullname="cv.formats:ATOM/protected:toSeconds" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts a string version of a time format into the seconds equivalent.
      ]]></description>
                     <shortDescription><![CDATA[
   Converts a string version of a time format into the seconds equivalent.]]></shortDescription>
                     <versions>
                        <langversion version="3.0    "/>
                        <playerversion name="Flash" version="9&#xA;"/>
                     </versions>
                     <result type="int"><![CDATA[                 <Int> The number of seconds for the given time.
   
   ]]></result>
                     <params>
                        <param name="str" type="String">
                           <description><![CDATA[             <String> The string to convert.
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <category><![CDATA[Protected
   ]]></category>
                     </customs>
                  </method>
               </methods>
               <fields>
                  <field name="mimetypes" fullname="cv.formats:ATOM/protected:mimetypes" accessLevel="protected" type="Object" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="B4S" type="class" fullname="cv.formats:B4S" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The B4S class parses B4S formatted playlist files and returns a PlayList.
  B4S is a proprietary XML-based format introduced in Winamp version 3.
     ]]></description>
               <shortDescription><![CDATA[
  The B4S class parses B4S formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="isValid" fullname="cv.formats:B4S/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:B4S/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="PLS" type="class" fullname="cv.formats:PLS" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The PLS class parses PLS formatted playlist files and returns a PlayList.
  A proprietary format used for playing Shoutcast and Icecast 
  streams. The syntax of a PLS file is the same syntax as a Windows 
  .ini file and was probably chosen because of support in the Windows API.
     ]]></description>
               <shortDescription><![CDATA[
  The PLS class parses PLS formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="isValid" fullname="cv.formats:PLS/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="regExec" fullname="cv.formats:PLS/protected:regExec" accessLevel="protected" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:PLS/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="file" fullname="cv.formats:PLS/protected:file" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="regex" fullname="cv.formats:PLS/protected:regex" accessLevel="protected" type="RegExp" isConst="false" isStatic="false">
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ASX" type="class" fullname="cv.formats:ASX" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.formats" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The ASX class parses ASX formatted playlist files and returns a PlayList.
     ]]></description>
               <shortDescription><![CDATA[
  The ASX class parses ASX formatted playlist files and returns a PlayList.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IPlaylistParser" fullName="cv.interfaces:IPlaylistParser" packageName="cv.interfaces" relativePath="../interfaces/IPlaylistParser.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="ext" type="String"/>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                        <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <result type="cv.data:PlayList">
                              <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                           </result>
                           <params>
                              <param name="data" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ASX" fullname="cv.formats:ASX/ASX" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="isValid" fullname="cv.formats:ASX/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.formats:ASX/toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toSeconds" fullname="cv.formats:ASX/protected:toSeconds" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts a string version of a time format into the seconds equivalent.
      ]]></description>
                     <shortDescription><![CDATA[
   Converts a string version of a time format into the seconds equivalent.]]></shortDescription>
                     <versions>
                        <langversion version="3.0    "/>
                        <playerversion name="Flash" version="9&#xA;"/>
                     </versions>
                     <result type="int"><![CDATA[                 <Int> The number of seconds for the given time.
   
   ]]></result>
                     <params>
                        <param name="str" type="String">
                           <description><![CDATA[             <String> The string to convert.
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <category><![CDATA[Protected
   ]]></category>
                     </customs>
                  </method>
               </methods>
               <fields>
                  <field name="mimetypes" fullname="cv.formats:ASX/protected:mimetypes" accessLevel="protected" type="Object" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="cv.media">
         <classes>
            <asClass name="RTMPPlayer" type="class" fullname="cv.media:RTMPPlayer" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.media" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  <h3>Version:</h3> 1.0.0<br>
  <h3>Date:</h3> 3/10/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The RTMPPlayer class extends the capabilities of the NetStreamPlayer.
  Allowing it to stream media from a server.
     ]]></description>
               <shortDescription><![CDATA[
  <h3>Version:</h3> 1.0.0<br>
  <h3>Date:</h3> 3/10/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The RTMPPlayer class extends the capabilities of the NetStreamPlayer.]]></shortDescription>
               <versions/>
               <author/>
               <eventsGenerated>
                  <event name="RTMPSampleAccess" owner="cv.media:RTMPPlayer" typeName="RTMP_SAMPLE_ACCESS">
                     <description><![CDATA[
  Dispatched when RTMPSampleAccess is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when RTMPSampleAccess is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="textData" owner="cv.media:RTMPPlayer" typeName="TEXT_DATA">
                     <description><![CDATA[
  Dispatched when onTextData is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onTextData is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="playStatus" owner="cv.media:RTMPPlayer" typeName="PLAY_STATUS">
                     <description><![CDATA[
  Dispatched when onPlayStatus is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onPlayStatus is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="lastSecond" owner="cv.media:RTMPPlayer" typeName="LAST_SECOND">
                     <description><![CDATA[
  Dispatched when onLastSecond is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onLastSecond is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="imageData" owner="cv.media:RTMPPlayer" typeName="IMAGE_DATA">
                     <description><![CDATA[
  Dispatched when onImageData is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onImageData is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="fcSubscribe" owner="cv.media:RTMPPlayer" typeName="FC_SUBSCRIBE">
                     <description><![CDATA[
  Dispatched when onFCSubscribe is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onFCSubscribe is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="captionInfo" owner="cv.media:RTMPPlayer" typeName="CAPTION_INFO">
                     <description><![CDATA[
  Dispatched when onCaptionInfo is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onCaptionInfo is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="caption" owner="cv.media:RTMPPlayer" typeName="CAPTION">
                     <description><![CDATA[
  Dispatched when onCaption is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onCaption is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="bandwidth" owner="cv.media:RTMPPlayer" typeName="BAND_WIDTH">
                     <description><![CDATA[
  Dispatched when onBWDone is called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when onBWDone is called.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
               </eventsGenerated>
               <asAncestors>
                  <asAncestor>
                     <classRef name="NetStreamPlayer" fullName="cv.media:NetStreamPlayer" packageName="cv.media" relativePath="NetStreamPlayer.html"/>
                     <fields>
                        <field name="_autoStart" fullname="cv.media:NetStreamPlayer/protected:_autoStart" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="true"/>
                        <field name="_buffer" fullname="cv.media:NetStreamPlayer/protected:_buffer" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0.1"/>
                        <field name="_encoding" fullname="cv.media:NetStreamPlayer/protected:_encoding" accessLevel="protected" type="uint" isConst="false" isStatic="false" defaultValue="0"/>
                        <field name="_leftToLeft" fullname="cv.media:NetStreamPlayer/protected:_leftToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1"/>
                        <field name="_leftToRight" fullname="cv.media:NetStreamPlayer/protected:_leftToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0"/>
                        <field name="_loadCurrent" fullname="cv.media:NetStreamPlayer/protected:_loadCurrent" accessLevel="protected" type="uint" isConst="false" isStatic="false"/>
                        <field name="_loadTotal" fullname="cv.media:NetStreamPlayer/protected:_loadTotal" accessLevel="protected" type="uint" isConst="false" isStatic="false"/>
                        <field name="_metaData" fullname="cv.media:NetStreamPlayer/protected:_metaData" accessLevel="protected" type="Object" isConst="false" isStatic="false"/>
                        <field name="_pan" fullname="cv.media:NetStreamPlayer/protected:_pan" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0"/>
                        <field name="_paused" fullname="cv.media:NetStreamPlayer/protected:_paused" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false"/>
                        <field name="_rightToLeft" fullname="cv.media:NetStreamPlayer/protected:_rightToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0"/>
                        <field name="_rightToRight" fullname="cv.media:NetStreamPlayer/protected:_rightToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1"/>
                        <field name="_status" fullname="cv.media:NetStreamPlayer/protected:_status" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="unloaded"/>
                        <field name="_streamHost" fullname="cv.media:NetStreamPlayer/protected:_streamHost" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="null"/>
                        <field name="_volume" fullname="cv.media:NetStreamPlayer/protected:_volume" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue=".5"/>
                        <field name="arrFileTypes" fullname="cv.media:NetStreamPlayer/protected:arrFileTypes" accessLevel="protected" type="Array" isConst="false" isStatic="false" defaultValue="unknown"/>
                        <field name="autoRewind" fullname="cv.media:NetStreamPlayer/autoRewind" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                           <shortDescription><![CDATA[
   Will automatically call stop (rewind) after playing complete.]]></shortDescription>
                        </field>
                        <field name="autoScale" fullname="cv.media:NetStreamPlayer/autoScale" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                           <shortDescription><![CDATA[ 
   Gets or sets whether the video object will be scaled to the metadata given
   for video dimensions.]]></shortDescription>
                        </field>
                        <field name="client" fullname="cv.media:NetStreamPlayer/protected:client" accessLevel="protected" type="Object" isConst="false" isStatic="false"/>
                        <field name="debug" fullname="cv.media:NetStreamPlayer/debug" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false"/>
                        <field name="loadTimer" fullname="cv.media:NetStreamPlayer/protected:loadTimer" accessLevel="protected" type="flash.utils:Timer" isConst="false" isStatic="false" defaultValue=""/>
                        <field name="nc" fullname="cv.media:NetStreamPlayer/protected:nc" accessLevel="protected" type="flash.net:NetConnection" isConst="false" isStatic="false"/>
                        <field name="ns" fullname="cv.media:NetStreamPlayer/protected:ns" accessLevel="protected" type="flash.net:NetStream" isConst="false" isStatic="false"/>
                        <field name="playTimer" fullname="cv.media:NetStreamPlayer/protected:playTimer" accessLevel="protected" type="flash.utils:Timer" isConst="false" isStatic="false" defaultValue=""/>
                        <field name="sendOnce" fullname="cv.media:NetStreamPlayer/protected:sendOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false"/>
                        <field name="skipOnce" fullname="cv.media:NetStreamPlayer/protected:skipOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false"/>
                        <field name="strURL" fullname="cv.media:NetStreamPlayer/protected:strURL" accessLevel="protected" type="String" isConst="false" isStatic="false"/>
                        <field name="vid" fullname="cv.media:NetStreamPlayer/protected:vid" accessLevel="protected" type="flash.media:Video" isConst="false" isStatic="false"/>
                        <field name="autoStart" fullname="cv.media:NetStreamPlayer/autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Whether media will play automatically once loaded.]]></shortDescription>
                        </field>
                        <field name="buffer" fullname="cv.media:NetStreamPlayer/buffer/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets or sets how long the NetStreamPlayer should buffer the video before playing, in seconds.]]></shortDescription>
                        </field>
                        <field name="currentPercent" fullname="cv.media:NetStreamPlayer/currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></shortDescription>
                        </field>
                        <field name="leftToLeft" fullname="cv.media:NetStreamPlayer/leftToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the left speaker.]]></shortDescription>
                        </field>
                        <field name="leftToRight" fullname="cv.media:NetStreamPlayer/leftToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the right speaker.]]></shortDescription>
                        </field>
                        <field name="loadCurrent" fullname="cv.media:NetStreamPlayer/loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></shortDescription>
                        </field>
                        <field name="loadTotal" fullname="cv.media:NetStreamPlayer/loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></shortDescription>
                        </field>
                        <field name="metaData" fullname="cv.media:NetStreamPlayer/metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   ]]></shortDescription>
                        </field>
                        <field name="pan" fullname="cv.media:NetStreamPlayer/pan/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   The left-to-right panning of the sound, ranging from -1 (full pan left) to 1 (full pan right).]]></shortDescription>
                        </field>
                        <field name="paused" fullname="cv.media:NetStreamPlayer/paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the pause status of the player.]]></shortDescription>
                        </field>
                        <field name="rightToLeft" fullname="cv.media:NetStreamPlayer/rightToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the left speaker.]]></shortDescription>
                        </field>
                        <field name="rightToRight" fullname="cv.media:NetStreamPlayer/rightToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the right speaker.]]></shortDescription>
                        </field>
                        <field name="status" fullname="cv.media:NetStreamPlayer/status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the load status of the player.]]></shortDescription>
                        </field>
                        <field name="timeCurrent" fullname="cv.media:NetStreamPlayer/timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></shortDescription>
                        </field>
                        <field name="timeLeft" fullname="cv.media:NetStreamPlayer/timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></shortDescription>
                        </field>
                        <field name="timeTotal" fullname="cv.media:NetStreamPlayer/timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></shortDescription>
                        </field>
                        <field name="video" fullname="cv.media:NetStreamPlayer/video/get" accessLevel="public" isConst="false" isStatic="false" type="flash.media:Video" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets or sets the reference to the display video object.]]></shortDescription>
                        </field>
                        <field name="volume" fullname="cv.media:NetStreamPlayer/volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="createConnection" fullname="cv.media:NetStreamPlayer/protected:createConnection" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="command" type="String" default="null"/>
                           </params>
                        </method>
                        <method name="createStream" fullname="cv.media:NetStreamPlayer/protected:createStream" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="netstream" type="flash.net:NetStream" default="null"/>
                           </params>
                        </method>
                        <method name="errorHandler" fullname="cv.media:NetStreamPlayer/protected:errorHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="e" type="flash.events:ErrorEvent"/>
                           </params>
                        </method>
                        <method name="getEstimatedLength" fullname="cv.media:NetStreamPlayer/protected:getEstimatedLength" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false"/>
                        <method name="load" fullname="cv.media:NetStreamPlayer/load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="loadTimerHandler" fullname="cv.media:NetStreamPlayer/protected:loadTimerHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="event" type="flash.events:TimerEvent"/>
                           </params>
                        </method>
                        <method name="onCuePoint" fullname="cv.media:NetStreamPlayer/protected:onCuePoint" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="o" type="Object"/>
                           </params>
                        </method>
                        <method name="onMetaData" fullname="cv.media:NetStreamPlayer/protected:onMetaData" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Handles the metadata returned.]]></shortDescription>
                           <params>
                              <param name="o" type="Object"/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.media:NetStreamPlayer/pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a netstream from the BulkLoader to be played.]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.media:NetStreamPlayer/play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="playTimerHandler" fullname="cv.media:NetStreamPlayer/protected:playTimerHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="event" type="flash.events:TimerEvent"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.media:NetStreamPlayer/seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.media:NetStreamPlayer/seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media
   
   ]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="setStatus" fullname="cv.media:NetStreamPlayer/protected:setStatus" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="str" type="String"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.media:NetStreamPlayer/stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media at the specified position.]]></shortDescription>
                        </method>
                        <method name="trace2" fullname="cv.media:NetStreamPlayer/protected:trace2" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <params>
                              <param name="arguements" type="restParam"/>
                           </params>
                        </method>
                        <method name="unload" fullname="cv.media:NetStreamPlayer/unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes the NetConnetion or NetStream, and resets the metadata.]]></shortDescription>
                        </method>
                        <method name="updateProgress" fullname="cv.media:NetStreamPlayer/protected:updateProgress" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false"/>
                        <method name="updateSoundTransform" fullname="cv.media:NetStreamPlayer/protected:updateSoundTransform" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false"/>
                     </methods>
                     <eventsGenerated>
                        <event name="status" owner="cv.media:NetStreamPlayer" typeName="STATUS">
                           <shortDescription><![CDATA[
  Dispatched when isPause or isPlaying has updated.]]></shortDescription>
                        </event>
                        <event name="playStart" owner="cv.media:NetStreamPlayer" typeName="PLAY_START">
                           <shortDescription><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></shortDescription>
                        </event>
                        <event name="playProgress" owner="cv.media:NetStreamPlayer" typeName="PLAY_PROGRESS">
                           <shortDescription><![CDATA[
  Dispatched as a media file is playing
    ]]></shortDescription>
                        </event>
                        <event name="playComplete" owner="cv.media:NetStreamPlayer" typeName="PLAY_COMPLETE">
                           <shortDescription><![CDATA[
  Dispatched as a media file finishes playing
    ]]></shortDescription>
                        </event>
                        <event name="metadata" owner="cv.media:NetStreamPlayer" typeName="METADATA">
                           <shortDescription><![CDATA[
  Dispatched as metadata is receieved from the media playing
    ]]></shortDescription>
                        </event>
                        <event name="loadStart" owner="cv.media:NetStreamPlayer" typeName="LOAD_START">
                           <shortDescription><![CDATA[
  Dispatched as a media file begins loading
    ]]></shortDescription>
                        </event>
                        <event name="loadProgress" owner="cv.media:NetStreamPlayer" typeName="LOAD_PROGRESS">
                           <shortDescription><![CDATA[
  Dispatched as a media file is loaded
    ]]></shortDescription>
                        </event>
                        <event name="loadComplete" owner="cv.media:NetStreamPlayer" typeName="LOAD_COMPLETE">
                           <shortDescription><![CDATA[
  Dispatched when the media file has completed loading
    ]]></shortDescription>
                        </event>
                        <event name="cuePoint" owner="cv.media:NetStreamPlayer" typeName="CUE_POINT">
                           <shortDescription><![CDATA[
  Dispatched when a cue point is reached.]]></shortDescription>
                        </event>
                     </eventsGenerated>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="flash.events.EventDispatcher" fullName="flash.events.EventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                     <fields>
                        <field name="autoStart" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
    Whether media will play automatically once loaded.]]></shortDescription>
                        </field>
                        <field name="currentPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[
   Gets the play progress percentage of the currently
   playing media file.]]></shortDescription>
                        </field>
                        <field name="loadCurrent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the number of bytes currently loaded.]]></shortDescription>
                        </field>
                        <field name="loadTotal" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the total number of bytes for a given file
   being loaded.]]></shortDescription>
                        </field>
                        <field name="metaData" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the meta data object of the current file if available.]]></shortDescription>
                        </field>
                        <field name="paused" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the pause status of the media player.]]></shortDescription>
                        </field>
                        <field name="status" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the loading status of the media player.]]></shortDescription>
                        </field>
                        <field name="timeCurrent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the elapsed play time of the current file.]]></shortDescription>
                        </field>
                        <field name="timeLeft" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the remaining play time of the current file.]]></shortDescription>
                        </field>
                        <field name="timeTotal" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets the total play time of the current file.]]></shortDescription>
                        </field>
                        <field name="volume" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false">
                           <shortDescription><![CDATA[
    Gets or sets the volume of the media player.]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                           <params>
                              <param name="ext" type="String"/>
                              <param name="url" type="String"/>
                           </params>
                        </method>
                        <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                        </method>
                        <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="RTMPPlayer" fullname="cv.media:RTMPPlayer/RTMPPlayer" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="RtmpSampleAccess" fullname="cv.media:RTMPPlayer/protected:RtmpSampleAccess" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="addHeader" fullname="cv.media:RTMPPlayer/addHeader" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Adds a context header to the Action Message Format (AMF) packet structure. 
   This header is sent with every future AMF packet. If you call 
   NetConnection.addHeader() using the same name, the new header replaces the 
   existing header, and the new header persists for the duration of the 
   NetConnection object. You can remove a header by calling 
   NetConnection.addHeader() with the name of the header to remove an 
   undefined object.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Adds a context header to the Action Message Format (AMF) packet structure.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="operation" type="String">
                           <description><![CDATA[Identifies the header and the ActionScript object 
   data associated with it.
   ]]></description>
                        </param>
                        <param name="mustUnderstand" type="Boolean" default="false">
                           <description><![CDATA[A value of true indicates that the server must 
   understand and process this header before it handles any of the 
   following headers or messages. 
   ]]></description>
                        </param>
                        <param name="param" type="Object" default="null">
                           <description><![CDATA[Any ActionScript object. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="call" fullname="cv.media:RTMPPlayer/call" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Invokes a command or method on Flash Media Server or on an 
   application server running Flash Remoting.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Invokes a command or method on Flash Media Server or on an 
   application server running Flash Remoting.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="String">
                           <description><![CDATA[A method specified in the form [objectPath/]method. 
   For example, the someObject/doSomething command tells the remote 
   server to invoke the clientObject.someObject.doSomething() method, 
   with all the optional ... arguments parameters. If the object path 
   is missing, clientObject.doSomething() is invoked on the remote server.
   ]]></description>
                        </param>
                        <param name="responder" type="flash.net:Responder">
                           <description><![CDATA[An optional object that is used to handle return 
   values from the server. The Responder object can have two defined 
   methods to handle the returned result: result and status. If an error 
   is returned as the result, status is invoked; otherwise, result is 
   invoked. The Responder object can process errors related to specific 
   operations, while the NetConnection object responds to errors related 
   to the connection status.
   ]]></description>
                        </param>
                        <param name="rest" type="restParam">
                           <description><![CDATA[rest Optional arguments that can be of any ActionScript 
   type, including a reference to another ActionScript object. These 
   arguments are passed to the method specified in the command parameter 
   when the method is executed on the remote application server. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="isValid" fullname="cv.media:RTMPPlayer/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="url" type="String"/>
                     </params>
                  </method>
                  <method name="netStatusHandler" fullname="cv.media:RTMPPlayer/protected:netStatusHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:NetStatusEvent"/>
                     </params>
                  </method>
                  <method name="onBWCheck" fullname="cv.media:RTMPPlayer/protected:onBWCheck" accessLevel="protected" result_type="Number" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   This is required by native bandwidth detection. It takes an argument,
   ...rest. The function must return a value, even if the value is 0, to 
   indicate to the server that the client has received the data.
   
   ]]></description>
                     <shortDescription><![CDATA[
   This is required by native bandwidth detection.]]></shortDescription>
                     <versions/>
                     <result type="Number"><![CDATA[   ]]></result>
                     <params>
                        <param name="rest" type="restParam">
                           <description><![CDATA[rest
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onBWDone" fullname="cv.media:RTMPPlayer/protected:onBWDone" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The server calls the onBWDone() function when it finishes measuring 
   the bandwidth. It takes four arguments. The first argument it returns 
   is the bandwidth measured in Kbps. The second and third arguments are 
   not used. The fourth argument is the latency in milliseconds.
   
   ]]></description>
                     <shortDescription><![CDATA[
   The server calls the onBWDone() function when it finishes measuring 
   the bandwidth.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="rest" type="restParam">
                           <description><![CDATA[rest
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onCaption" fullname="cv.media:RTMPPlayer/protected:onCaption" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="cps" type="String"/>
                        <param name="spk" type="Number"/>
                     </params>
                  </method>
                  <method name="onCaptionInfo" fullname="cv.media:RTMPPlayer/protected:onCaptionInfo" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onFCSubscribe" fullname="cv.media:RTMPPlayer/protected:onFCSubscribe" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onImageData" fullname="cv.media:RTMPPlayer/protected:onImageData" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onLastSecond" fullname="cv.media:RTMPPlayer/protected:onLastSecond" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onPlayStatus" fullname="cv.media:RTMPPlayer/protected:onPlayStatus" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onTextData" fullname="cv.media:RTMPPlayer/protected:onTextData" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="VERSION" fullname="cv.media:RTMPPlayer/VERSION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="1.0.0">
                     <description><![CDATA[
         The current version
   ]]></description>
                     <shortDescription><![CDATA[
         The current version
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="netConnection" fullname="cv.media:RTMPPlayer/netConnection/get" accessLevel="public" isConst="false" isStatic="false" type="flash.net:NetConnection" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns a reference to the NetConnection if it exists. This is used
   instead of having all the same properties in NetStreamPlayer.
   
   Note: addHeader() and call() are added to NetStreamPlayer for your
   convenience.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns a reference to the NetConnection if it exists.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="RTMPPlayer.html#addHeader()" label="RTMPPlayer.addHeader()"/>
                        <see href="RTMPPlayer.html#call()" label="RTMPPlayer.call()"/>
                     </sees>
                  </field>
                  <field name="objectEncoding" fullname="cv.media:RTMPPlayer/objectEncoding/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the object encodeing for use with streaming servers.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the object encodeing for use with streaming servers.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="streamHost" fullname="cv.media:RTMPPlayer/streamHost/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the stream host url for use with streaming media.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the stream host url for use with streaming media.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ImagePlayer" type="class" fullname="cv.media:ImagePlayer" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.media" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  <h3>Version:</h3> 1.0.2<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The ImagePlayer class is a facade for controlling loading, and playing
  of images.
  <hr>
  <ul>
  <li>1.0.2
  <ul>
    <li>Tweaked how load complete reports</li>
    <li>loadCurrent and loadTotal are now uints and more accurate</li>
  </ul>
  </li>
  <li>1.0.1
  <ul>
    <li>Changed how PLAY_START and autoStart is handled. autoStart is no longer overwritten and will pause before any audio is heard.</li>
    <li>Handles autostart and PLAY_START better. Also has a new status of STARTED to differentiate between when autoStart and the first play().</li>
    <li>Added autoRewind prop. If set, it will rewind after PLAY_COMPLETE so the play button can be used to resume.</li>
  </ul>
  </li>
  <li>1.0.0
  <ul>
    <li>Refactored release</li>
  </ul>
  </li>
  </ul>
     ]]></description>
               <shortDescription><![CDATA[
  <h3>Version:</h3> 1.0.2<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The ImagePlayer class is a facade for controlling loading, and playing
  of images.]]></shortDescription>
               <versions/>
               <author/>
               <eventsGenerated>
                  <event name="status" owner="cv.media:ImagePlayer" typeName="STATUS">
                     <description><![CDATA[
  Dispatched when status has been updated.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when status has been updated.]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="playStart" owner="cv.media:ImagePlayer" typeName="PLAY_START">
                     <description><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playProgress" owner="cv.media:ImagePlayer" typeName="PLAY_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is playing
    ]]></shortDescription>
                     <eventType href="../events/PlayProgressEvent.html#PLAY_PROGRESS" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playComplete" owner="cv.media:ImagePlayer" typeName="PLAY_COMPLETE">
                     <description><![CDATA[
  Dispatched as a media file finishes playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file finishes playing
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="metadata" owner="cv.media:ImagePlayer" typeName="METADATA">
                     <description><![CDATA[
  Dispatched after images loads. Contains height and width of image.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched after images loads.]]></shortDescription>
                     <eventType href="../events/MetaDataEvent.html#METADATA" label="cv.events.MetaDataEvent.METADATA"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="loadStart" owner="cv.media:ImagePlayer" typeName="LOAD_START">
                     <description><![CDATA[
  Dispatched as a media file begins loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file begins loading
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="loadProgress" owner="cv.media:ImagePlayer" typeName="LOAD_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is loaded
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is loaded
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_PROGRESS" label="cv.events.LoadEvent.LOAD_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.ProgressEvent"/>
                  </event>
                  <event name="loadComplete" owner="cv.media:ImagePlayer" typeName="LOAD_COMPLETE">
                     <description><![CDATA[
  Dispatched when the media file has completed loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the media file has completed loading
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_COMPLETE" label="cv.events.LoadEvent.LOAD_COMPLETE"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
               </eventsGenerated>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.display.Sprite" fullName="flash.display.Sprite" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                           <params>
                              <param name="ext" type="String"/>
                              <param name="url" type="String"/>
                           </params>
                        </method>
                        <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                        </method>
                        <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ImagePlayer" fullname="cv.media:ImagePlayer/ImagePlayer" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="errorHandler" fullname="cv.media:ImagePlayer/protected:errorHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:ErrorEvent"/>
                     </params>
                  </method>
                  <method name="imageHandler" fullname="cv.media:ImagePlayer/protected:imageHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="isValid" fullname="cv.media:ImagePlayer/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Validates if the given filetype is compatible to be played with ImagePlayer.
   The acceptable file types are :
   <ul>
   <li>png</li>
   <li>jpg</li>
   <li>gif</li>
   </ul>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with ImagePlayer.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Boolean of whether the extension was valid or not.
   ]]></result>
                     <params>
                        <param name="ext" type="String">
                           <description><![CDATA[The file extension to be validated
   ]]></description>
                        </param>
                        <param name="url" type="String">
                           <description><![CDATA[The full file url if the extension is not enough
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="load" fullname="cv.media:ImagePlayer/load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a new file to be played.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.LoadEvent.LOAD_START"/>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                     <params>
                        <param name="item" type="">
                           <description><![CDATA[The url of the file to be loaded
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pause" fullname="cv.media:ImagePlayer/pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Pauses the media
   
   ]]></description>
                     <shortDescription><![CDATA[
   Pauses the media
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="b" type="Boolean" default="true">
                           <description><![CDATA[Whether to pause or toggle it off
   
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </method>
                  <method name="play" fullname="cv.media:ImagePlayer/play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Starts playback at the given position.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Starts playback at the given position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="pos" type="int" default="0">
                           <description><![CDATA[Position to play from
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   ]]></default>
                     </customs>
                  </method>
                  <method name="progressHandler" fullname="cv.media:ImagePlayer/protected:progressHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:ProgressEvent"/>
                     </params>
                  </method>
                  <method name="seek" fullname="cv.media:ImagePlayer/seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to time given.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to time given.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="time" type="">
                           <description><![CDATA[Seconds into the audio to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seekPercent" fullname="cv.media:ImagePlayer/seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to the given percent
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to the given percent
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="n" type="Number">
                           <description><![CDATA[Percent to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setStatus" fullname="cv.media:ImagePlayer/protected:setStatus" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="str" type="String"/>
                     </params>
                  </method>
                  <method name="stop" fullname="cv.media:ImagePlayer/stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the image at the specified position. Sets the position given 
   as the pause position.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the image at the specified position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="timeHandler" fullname="cv.media:ImagePlayer/protected:timeHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="trace2" fullname="cv.media:ImagePlayer/protected:trace2" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="arguements" type="restParam"/>
                     </params>
                  </method>
                  <method name="unload" fullname="cv.media:ImagePlayer/unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unloads the image and resets the metadata.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Unloads the image and resets the metadata.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                  </method>
               </methods>
               <fields>
                  <field name="VERSION" fullname="cv.media:ImagePlayer/VERSION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="1.0.2">
                     <description><![CDATA[
         The current version
   ]]></description>
                     <shortDescription><![CDATA[
         The current version
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="_autoStart" fullname="cv.media:ImagePlayer/protected:_autoStart" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="true">
                     <versions/>
                  </field>
                  <field name="_loadCurrent" fullname="cv.media:ImagePlayer/protected:_loadCurrent" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_loadTotal" fullname="cv.media:ImagePlayer/protected:_loadTotal" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_metaData" fullname="cv.media:ImagePlayer/protected:_metaData" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_paused" fullname="cv.media:ImagePlayer/protected:_paused" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_status" fullname="cv.media:ImagePlayer/protected:_status" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="unloaded">
                     <versions/>
                  </field>
                  <field name="_timeTotal" fullname="cv.media:ImagePlayer/protected:_timeTotal" accessLevel="protected" type="Number" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_volume" fullname="cv.media:ImagePlayer/protected:_volume" accessLevel="protected" type="Number" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="arrFileTypes" fullname="cv.media:ImagePlayer/protected:arrFileTypes" accessLevel="protected" type="Array" isConst="false" isStatic="false" defaultValue="unknown">
                     <versions/>
                  </field>
                  <field name="autoRewind" fullname="cv.media:ImagePlayer/autoRewind" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Will automatically call stop (rewind) after playing complete. If disabled, this will pause
   the player instead.
   ]]></description>
                     <shortDescription><![CDATA[
   Will automatically call stop (rewind) after playing complete.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="debug" fullname="cv.media:ImagePlayer/debug" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Enables/Disables debug traces
   ]]></description>
                     <shortDescription><![CDATA[
   Enables/Disables debug traces
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="ldr" fullname="cv.media:ImagePlayer/protected:ldr" accessLevel="protected" type="flash.display:Loader" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="pausePosition" fullname="cv.media:ImagePlayer/protected:pausePosition" accessLevel="protected" type="int" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="playInterval" fullname="cv.media:ImagePlayer/protected:playInterval" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="position" fullname="cv.media:ImagePlayer/protected:position" accessLevel="protected" type="int" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="sendOnce" fullname="cv.media:ImagePlayer/protected:sendOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="skipOnce" fullname="cv.media:ImagePlayer/protected:skipOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="strURL" fullname="cv.media:ImagePlayer/protected:strURL" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="autoStart" fullname="cv.media:ImagePlayer/autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Whether media will play automatically once loaded.
   
   ]]></description>
                     <shortDescription><![CDATA[ 
   Whether media will play automatically once loaded.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </field>
                  <field name="currentPercent" fullname="cv.media:ImagePlayer/currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadCurrent" fullname="cv.media:ImagePlayer/loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadTotal" fullname="cv.media:ImagePlayer/loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="metaData" fullname="cv.media:ImagePlayer/metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="paused" fullname="cv.media:ImagePlayer/paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the pause status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the pause status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="status" fullname="cv.media:ImagePlayer/status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the load status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the load status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeCurrent" fullname="cv.media:ImagePlayer/timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeLeft" fullname="cv.media:ImagePlayer/timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeTotal" fullname="cv.media:ImagePlayer/timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="volume" fullname="cv.media:ImagePlayer/volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="NetStreamPlayer" type="class" fullname="cv.media:NetStreamPlayer" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.media" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  <h3>Version:</h3> 3.0.2<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The NetStreamPlayer class is a facade for controlling loading, and playing
  of video, streaming video and M4A files within Flash. It intelligently handles pausing, and
  loading.
  
  Note: Sometimes playhead won't move on videos, this is because there is no 
  metadata describing it's duration. If this occurs, there is no way to
  calculate how long a video is, so it stops the playhead from moving.
  <hr>
  <ul>
  <li>3.0.2
  <ul>
    <li>Tweaked how load complete reports</li>
    <li>loadCurrent and loadTotal are now uints and more accurate</li>
  </ul>
  </li>
  <li>3.0.1
  <ul>
    <li>Changed how PLAY_START and autoStart is handled. autoStart is no longer overwritten and will pause before any audio is heard.</li>
    <li>Handles autostart and PLAY_START better. Also has a new status of STARTED to differentiate between when autoStart and the first play().</li>
    <li>Added autoRewind prop. If set, it will rewind after PLAY_COMPLETE so the play button can be used to resume.</li>
  </ul>
  </li>
  <li>3.0.0
  <ul>
    <li>Refactored release</li>
  </ul>
  </li>
  </ul>
     ]]></description>
               <shortDescription><![CDATA[
  <h3>Version:</h3> 3.0.2<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The NetStreamPlayer class is a facade for controlling loading, and playing
  of video, streaming video and M4A files within Flash.]]></shortDescription>
               <versions/>
               <author/>
               <eventsGenerated>
                  <event name="status" owner="cv.media:NetStreamPlayer" typeName="STATUS">
                     <description><![CDATA[
  Dispatched when isPause or isPlaying has updated.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when isPause or isPlaying has updated.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playStart" owner="cv.media:NetStreamPlayer" typeName="PLAY_START">
                     <description><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playProgress" owner="cv.media:NetStreamPlayer" typeName="PLAY_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is playing
    ]]></shortDescription>
                     <eventType href="../events/PlayProgressEvent.html#PLAY_PROGRESS" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playComplete" owner="cv.media:NetStreamPlayer" typeName="PLAY_COMPLETE">
                     <description><![CDATA[
  Dispatched as a media file finishes playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file finishes playing
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="metadata" owner="cv.media:NetStreamPlayer" typeName="METADATA">
                     <description><![CDATA[
  Dispatched as metadata is receieved from the media playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as metadata is receieved from the media playing
    ]]></shortDescription>
                     <eventType href="../events/MetaDataEvent.html#METADATA" label="cv.events.MetaDataEvent.METADATA"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="loadStart" owner="cv.media:NetStreamPlayer" typeName="LOAD_START">
                     <description><![CDATA[
  Dispatched as a media file begins loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file begins loading
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_START" label="cv.events.LoadEvent.LOAD_START"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadStart</code> event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
      <tr>
              <th>Property</th>
              <th>Value</th>
            </tr>
      <tr>
              <td><code>bubbles</code></td>
              <td><code>false</code></td></tr>
      <tr><td><code>cancelable</code></td><td><code>false</code>; there is
            no default behavior to cancel.</td></tr> 
      <tr><td><code>time</code></td><td>The estimated duration of the media file.</td></tr>
      <tr><td><code>url</code></td><td>TThe url of the item being loaded.</td></tr>
      <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>index</code></td><td>The zero-based index in the DataProvider
      that contains the renderer.</td></tr>
      <tr><td><code>item</code></td><td>A reference to the data that belongs to the renderer.</td></tr>
      <tr><td><code>mediaType</code></td><td>The type of media being loaded, either "audio" or "video".</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
          </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="loadProgress" owner="cv.media:NetStreamPlayer" typeName="LOAD_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is loaded
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is loaded
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_PROGRESS" label="cv.events.LoadEvent.LOAD_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.ProgressEvent"/>
                  </event>
                  <event name="loadComplete" owner="cv.media:NetStreamPlayer" typeName="LOAD_COMPLETE">
                     <description><![CDATA[
  Dispatched when the media file has completed loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the media file has completed loading
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_COMPLETE" label="cv.events.LoadEvent.LOAD_COMPLETE"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="cuePoint" owner="cv.media:NetStreamPlayer" typeName="CUE_POINT">
                     <description><![CDATA[
  Dispatched when a cue point is reached.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when a cue point is reached.]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="cv.events.MetadataEvent"/>
                  </event>
               </eventsGenerated>
               <asDecendants>
                  <classRef name="RTMPPlayer" fullName="cv.media:RTMPPlayer" packageName="cv.media" relativePath="../media/RTMPPlayer.html"/>
               </asDecendants>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.EventDispatcher" fullName="flash.events.EventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                           <params>
                              <param name="ext" type="String"/>
                              <param name="url" type="String"/>
                           </params>
                        </method>
                        <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                        </method>
                        <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="NetStreamPlayer" fullname="cv.media:NetStreamPlayer/NetStreamPlayer" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="createConnection" fullname="cv.media:NetStreamPlayer/protected:createConnection" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="String" default="null"/>
                     </params>
                  </method>
                  <method name="createStream" fullname="cv.media:NetStreamPlayer/protected:createStream" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="netstream" type="flash.net:NetStream" default="null"/>
                     </params>
                  </method>
                  <method name="errorHandler" fullname="cv.media:NetStreamPlayer/protected:errorHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:ErrorEvent"/>
                     </params>
                  </method>
                  <method name="getEstimatedLength" fullname="cv.media:NetStreamPlayer/protected:getEstimatedLength" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="int"/>
                  </method>
                  <method name="isValid" fullname="cv.media:NetStreamPlayer/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Validates if the given filetype is compatible to be played with NetStreamPlayer. 
   The acceptable file types are :
   <ul>
   <li>flv : video/x-flv Flash Video</li>
   <li>f4v : video/mp4  Flash Video</li>
   <li>f4p : video/mp4  Protected Flash Video</li>
   <li>f4b : audio/mp4  Flash Audio Book</li>
   <li>f4a : audio/mp4  Flash Audio</li>
   <li>3gp : video/3gpp  audio/3gpp 3GPP for GSM-based Phones</li>
   <li>3g2 : video/3gpp  audio/3gpp 3GPP2 for CDMA-based Phones</li>
   <li>mov : video/quicktime QuickTime Movie</li>
   <li>mp4 : video/mp4  H.264 MPEG-4 Video</li>
   <li>m4v : video/mp4  H.264 MPEG-4 Video</li>
   <li>m4a : audio/mp4  Audio-only MPEG-4</li>
   <li>p4v : audio/mp4  Protected H.264 MPEG-4 Video</li>
   </ul>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with NetStreamPlayer.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Boolean of whether the extension was valid or not.
   ]]></result>
                     <params>
                        <param name="ext" type="String">
                           <description><![CDATA[The file extension to be validated
   ]]></description>
                        </param>
                        <param name="url" type="String">
                           <description><![CDATA[The full file url if the extension is not enough
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="load" fullname="cv.media:NetStreamPlayer/load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a new file to be played.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="item" type=""/>
                     </params>
                     <customs>
                        <fparam><![CDATA[s The url of the file to be loaded
   ]]></fparam>
                     </customs>
                  </method>
                  <method name="loadTimerHandler" fullname="cv.media:NetStreamPlayer/protected:loadTimerHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="flash.events:TimerEvent"/>
                     </params>
                  </method>
                  <method name="netStatusHandler" fullname="cv.media:NetStreamPlayer/protected:netStatusHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:NetStatusEvent"/>
                     </params>
                  </method>
                  <method name="onCuePoint" fullname="cv.media:NetStreamPlayer/protected:onCuePoint" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="onMetaData" fullname="cv.media:NetStreamPlayer/protected:onMetaData" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Handles the metadata returned. Possible data sent:
   <li>canSeekToEnd</li>
   <li>cuePoints</li>
   <li>audiocodecid</li>
   <li>audiodelay</li>
   <li>audiodatarate</li>
   <li>videocodecid</li>
   <li>framerate</li>
   <li>videodatarate</li>
   <li>height - Older version of encode</li>
   <li>width - Older version of encode</li>
   <li>duration - Older version of encode</li>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Handles the metadata returned.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pause" fullname="cv.media:NetStreamPlayer/pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a netstream from the BulkLoader to be played. This cannot be used in 
   conjunction with TempoLite since the location is not a url. Using
   loadAsset will IGNORE any streamhosts set becuase you can only use this
   if the video is progressively downloaded.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a netstream from the BulkLoader to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                     <params>
                        <param name="b" type="Boolean" default="true">
                           <description><![CDATA[The netstream object from the BulkLoader
   
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <internal><![CDATA[    Not complete yet. BulkLoader seems to handle NetStreams kinda funky, staying
   away til this is cleaned up.
   
   ]]></internal>
                     </customs>
                  </method>
                  <method name="play" fullname="cv.media:NetStreamPlayer/play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the media, starting at the given position.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the media, starting at the given position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="pos" type="int" default="0">
                           <description><![CDATA[Position to play from
   
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   ]]></default>
                     </customs>
                  </method>
                  <method name="playTimerHandler" fullname="cv.media:NetStreamPlayer/protected:playTimerHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="flash.events:TimerEvent"/>
                     </params>
                  </method>
                  <method name="seek" fullname="cv.media:NetStreamPlayer/seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to time given in the media.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to time given in the media.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="time" type="">
                           <description><![CDATA[Seconds into the media to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seekPercent" fullname="cv.media:NetStreamPlayer/seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to the given percent in the media
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to the given percent in the media
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="n" type="Number">
                           <description><![CDATA[Percent to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setStatus" fullname="cv.media:NetStreamPlayer/protected:setStatus" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="str" type="String"/>
                     </params>
                  </method>
                  <method name="stop" fullname="cv.media:NetStreamPlayer/stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the media at the specified position. Sets the position given as the pause position.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the media at the specified position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="trace2" fullname="cv.media:NetStreamPlayer/protected:trace2" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="arguements" type="restParam"/>
                     </params>
                  </method>
                  <method name="unload" fullname="cv.media:NetStreamPlayer/unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the media, closes the NetConnetion or NetStream, and resets the metadata.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the media, closes the NetConnetion or NetStream, and resets the metadata.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                  </method>
                  <method name="updateProgress" fullname="cv.media:NetStreamPlayer/protected:updateProgress" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="updateSoundTransform" fullname="cv.media:NetStreamPlayer/protected:updateSoundTransform" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="VERSION" fullname="cv.media:NetStreamPlayer/VERSION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="3.0.2">
                     <description><![CDATA[
         The current version
   ]]></description>
                     <shortDescription><![CDATA[
         The current version
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="_autoStart" fullname="cv.media:NetStreamPlayer/protected:_autoStart" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="true">
                     <versions/>
                  </field>
                  <field name="_buffer" fullname="cv.media:NetStreamPlayer/protected:_buffer" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0.1">
                     <versions/>
                  </field>
                  <field name="_encoding" fullname="cv.media:NetStreamPlayer/protected:_encoding" accessLevel="protected" type="uint" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_leftToLeft" fullname="cv.media:NetStreamPlayer/protected:_leftToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="_leftToRight" fullname="cv.media:NetStreamPlayer/protected:_leftToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_loadCurrent" fullname="cv.media:NetStreamPlayer/protected:_loadCurrent" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_loadTotal" fullname="cv.media:NetStreamPlayer/protected:_loadTotal" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_metaData" fullname="cv.media:NetStreamPlayer/protected:_metaData" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_pan" fullname="cv.media:NetStreamPlayer/protected:_pan" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_paused" fullname="cv.media:NetStreamPlayer/protected:_paused" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_rightToLeft" fullname="cv.media:NetStreamPlayer/protected:_rightToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_rightToRight" fullname="cv.media:NetStreamPlayer/protected:_rightToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="_status" fullname="cv.media:NetStreamPlayer/protected:_status" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="unloaded">
                     <versions/>
                  </field>
                  <field name="_streamHost" fullname="cv.media:NetStreamPlayer/protected:_streamHost" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="null">
                     <versions/>
                  </field>
                  <field name="_volume" fullname="cv.media:NetStreamPlayer/protected:_volume" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue=".5">
                     <versions/>
                  </field>
                  <field name="arrFileTypes" fullname="cv.media:NetStreamPlayer/protected:arrFileTypes" accessLevel="protected" type="Array" isConst="false" isStatic="false" defaultValue="unknown">
                     <versions/>
                  </field>
                  <field name="autoRewind" fullname="cv.media:NetStreamPlayer/autoRewind" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Will automatically call stop (rewind) after playing complete. If disabled, this will pause
   the player instead.
   ]]></description>
                     <shortDescription><![CDATA[
   Will automatically call stop (rewind) after playing complete.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="autoScale" fullname="cv.media:NetStreamPlayer/autoScale" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[ 
   Gets or sets whether the video object will be scaled to the metadata given
   for video dimensions.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets whether the video object will be scaled to the metadata given
   for video dimensions.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="client" fullname="cv.media:NetStreamPlayer/protected:client" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="debug" fullname="cv.media:NetStreamPlayer/debug" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="loadTimer" fullname="cv.media:NetStreamPlayer/protected:loadTimer" accessLevel="protected" type="flash.utils:Timer" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="nc" fullname="cv.media:NetStreamPlayer/protected:nc" accessLevel="protected" type="flash.net:NetConnection" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="ns" fullname="cv.media:NetStreamPlayer/protected:ns" accessLevel="protected" type="flash.net:NetStream" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="playTimer" fullname="cv.media:NetStreamPlayer/protected:playTimer" accessLevel="protected" type="flash.utils:Timer" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="sendOnce" fullname="cv.media:NetStreamPlayer/protected:sendOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="skipOnce" fullname="cv.media:NetStreamPlayer/protected:skipOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="strURL" fullname="cv.media:NetStreamPlayer/protected:strURL" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="vid" fullname="cv.media:NetStreamPlayer/protected:vid" accessLevel="protected" type="flash.media:Video" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="autoStart" fullname="cv.media:NetStreamPlayer/autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Whether media will play automatically once loaded.
   
   ]]></description>
                     <shortDescription><![CDATA[ 
   Whether media will play automatically once loaded.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </field>
                  <field name="buffer" fullname="cv.media:NetStreamPlayer/buffer/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets how long the NetStreamPlayer should buffer the video before playing, in seconds.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets how long the NetStreamPlayer should buffer the video before playing, in seconds.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentPercent" fullname="cv.media:NetStreamPlayer/currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="leftToLeft" fullname="cv.media:NetStreamPlayer/leftToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the left speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the left speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="leftToRight" fullname="cv.media:NetStreamPlayer/leftToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the right speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the right speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadCurrent" fullname="cv.media:NetStreamPlayer/loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadTotal" fullname="cv.media:NetStreamPlayer/loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="metaData" fullname="cv.media:NetStreamPlayer/metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="pan" fullname="cv.media:NetStreamPlayer/pan/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   The left-to-right panning of the sound, ranging from -1 (full pan left) to 1 (full pan right). 
   A value of 0 represents no panning (balanced center between right and left). 
   ]]></description>
                     <shortDescription><![CDATA[ 
   The left-to-right panning of the sound, ranging from -1 (full pan left) to 1 (full pan right).]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="paused" fullname="cv.media:NetStreamPlayer/paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the pause status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the pause status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="rightToLeft" fullname="cv.media:NetStreamPlayer/rightToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the left speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the left speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="rightToRight" fullname="cv.media:NetStreamPlayer/rightToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the right speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the right speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="status" fullname="cv.media:NetStreamPlayer/status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the load status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the load status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeCurrent" fullname="cv.media:NetStreamPlayer/timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeLeft" fullname="cv.media:NetStreamPlayer/timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeTotal" fullname="cv.media:NetStreamPlayer/timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="video" fullname="cv.media:NetStreamPlayer/video/get" accessLevel="public" isConst="false" isStatic="false" type="flash.media:Video" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the reference to the display video object.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the reference to the display video object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="volume" fullname="cv.media:NetStreamPlayer/volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="SoundPlayer" type="class" fullname="cv.media:SoundPlayer" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.media" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  <h3>Version:</h3> 3.0.3<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The SoundPlayer class is a facade for controlling loading, and playing
  of MP3 files within Flash. It intelligently handles pausing, and
  loading.
  <hr>
  <ul>
  <li>3.0.3
  <ul>
    <li>Tweaked how load complete reports</li>
    <li>loadCurrent and loadTotal are now uints and more accurate</li>
  </ul>
  </li>
  <li>3.0.2
  <ul>
    <li>Handles autostart and PLAY_START better. Also has a new status of STARTED to differentiate between when autoStart and the first play().</li>
    <li>Added autoRewind prop. If set, it will rewind after PLAY_COMPLETE so the play button can be used to resume.</li>
  </ul>
  </li>
  <li>3.0.1
  <ul>
    <li>Changed how PLAY_START and autoStart is handled. autoStart is no longer overwritten and will pause before any audio is heard.</li>
  </ul>
  </li>
  <li>3.0.0
  <ul>
    <li>Refactored release</li>
  </ul>
  </li>
  </ul>
     ]]></description>
               <shortDescription><![CDATA[
  <h3>Version:</h3> 3.0.3<br>
  <h3>Date:</h3> 4/02/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  The SoundPlayer class is a facade for controlling loading, and playing
  of MP3 files within Flash.]]></shortDescription>
               <versions/>
               <author/>
               <eventsGenerated>
                  <event name="status" owner="cv.media:SoundPlayer" typeName="STATUS">
                     <description><![CDATA[
  Dispatched when status has been updated.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when status has been updated.]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playStart" owner="cv.media:SoundPlayer" typeName="PLAY_START">
                     <description><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playProgress" owner="cv.media:SoundPlayer" typeName="PLAY_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is playing
    ]]></shortDescription>
                     <eventType href="../events/PlayProgressEvent.html#PLAY_PROGRESS" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playComplete" owner="cv.media:SoundPlayer" typeName="PLAY_COMPLETE">
                     <description><![CDATA[
  Dispatched as a media file finishes playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file finishes playing
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="metadata" owner="cv.media:SoundPlayer" typeName="METADATA">
                     <description><![CDATA[
  Dispatched as ID3 metadata is receieved from an MP3
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as ID3 metadata is receieved from an MP3
    ]]></shortDescription>
                     <eventType href="../events/MetaDataEvent.html#METADATA" label="cv.events.MetaDataEvent.METADATA"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="loadStart" owner="cv.media:SoundPlayer" typeName="LOAD_START">
                     <description><![CDATA[
  Dispatched as a media file begins loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file begins loading
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="loadProgress" owner="cv.media:SoundPlayer" typeName="LOAD_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is loaded
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is loaded
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_PROGRESS" label="cv.events.LoadEvent.LOAD_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.ProgressEvent"/>
                  </event>
                  <event name="loadComplete" owner="cv.media:SoundPlayer" typeName="LOAD_COMPLETE">
                     <description><![CDATA[
  Dispatched when the media file has completed loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the media file has completed loading
    ]]></shortDescription>
                     <eventType href="../events/LoadEvent.html#LOAD_COMPLETE" label="cv.events.LoadEvent.LOAD_COMPLETE"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="../events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
               </eventsGenerated>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.EventDispatcher" fullName="flash.events.EventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                           <params>
                              <param name="ext" type="String"/>
                              <param name="url" type="String"/>
                           </params>
                        </method>
                        <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                        </method>
                        <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="SoundPlayer" fullname="cv.media:SoundPlayer/SoundPlayer" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="errorHandler" fullname="cv.media:SoundPlayer/protected:errorHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:ErrorEvent"/>
                     </params>
                  </method>
                  <method name="getEstimatedLength" fullname="cv.media:SoundPlayer/protected:getEstimatedLength" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="int"/>
                  </method>
                  <method name="isValid" fullname="cv.media:SoundPlayer/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Validates if the given filetype is compatible to be played with SoundPlayer.
   The acceptable file types are :
   <ul>
   <li>mp3</li>
   </ul>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with SoundPlayer.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Boolean of whether the extension was valid or not.
   ]]></result>
                     <params>
                        <param name="ext" type="String">
                           <description><![CDATA[The file extension to be validated
   ]]></description>
                        </param>
                        <param name="url" type="String">
                           <description><![CDATA[The full file url if the extension is not enough
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="load" fullname="cv.media:SoundPlayer/load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a new file to be played.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.LoadEvent.LOAD_START"/>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                     <params>
                        <param name="item" type="">
                           <description><![CDATA[The url of the file to be loaded
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="loadAsset" fullname="cv.media:SoundPlayer/loadAsset" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a sound from the library to be played. This cannot be used in 
   conjunction with TempoLite since the location is not a url.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a sound from the library to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                     <params>
                        <param name="sound" type="flash.media:Sound">
                           <description><![CDATA[The sound object from the library
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pause" fullname="cv.media:SoundPlayer/pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Controls the pause of the audio
   
   ]]></description>
                     <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="b" type="Boolean" default="true">
                           <description><![CDATA[Whether to pause or not
   
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </method>
                  <method name="play" fullname="cv.media:SoundPlayer/play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the audio, starting at the given position.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the audio, starting at the given position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="pos" type="int" default="0">
                           <description><![CDATA[Position to play from
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   ]]></default>
                     </customs>
                  </method>
                  <method name="progressHandler" fullname="cv.media:SoundPlayer/protected:progressHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:ProgressEvent"/>
                     </params>
                  </method>
                  <method name="seek" fullname="cv.media:SoundPlayer/seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to time given in the audio.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to time given in the audio.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="time" type="">
                           <description><![CDATA[Seconds into playback to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seekPercent" fullname="cv.media:SoundPlayer/seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to the given percent in the audio
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to the given percent in the audio
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     </sees>
                     <params>
                        <param name="n" type="Number">
                           <description><![CDATA[Percent to seek to
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setStatus" fullname="cv.media:SoundPlayer/protected:setStatus" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="str" type="String"/>
                     </params>
                  </method>
                  <method name="soundHandler" fullname="cv.media:SoundPlayer/protected:soundHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="stop" fullname="cv.media:SoundPlayer/stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the audio at the specified position. Sets the position given 
   as the pause position.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the audio at the specified position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="trace2" fullname="cv.media:SoundPlayer/protected:trace2" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="arguements" type="restParam"/>
                     </params>
                  </method>
                  <method name="unload" fullname="cv.media:SoundPlayer/unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the audio, closes the sound class, and resets the metadata.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the audio, closes the sound class, and resets the metadata.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.PlayProgressEvent.STATUS"/>
                     </sees>
                  </method>
                  <method name="updateSoundTransform" fullname="cv.media:SoundPlayer/protected:updateSoundTransform" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="VERSION" fullname="cv.media:SoundPlayer/VERSION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="3.0.3">
                     <description><![CDATA[
         The current version
   ]]></description>
                     <shortDescription><![CDATA[
         The current version
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="_autoStart" fullname="cv.media:SoundPlayer/protected:_autoStart" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="true">
                     <versions/>
                  </field>
                  <field name="_buffer" fullname="cv.media:SoundPlayer/protected:_buffer" accessLevel="protected" type="int" isConst="false" isStatic="false" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="_isReadyToPlay" fullname="cv.media:SoundPlayer/protected:_isReadyToPlay" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_leftToLeft" fullname="cv.media:SoundPlayer/protected:_leftToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="_leftToRight" fullname="cv.media:SoundPlayer/protected:_leftToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_loadCurrent" fullname="cv.media:SoundPlayer/protected:_loadCurrent" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_loadTotal" fullname="cv.media:SoundPlayer/protected:_loadTotal" accessLevel="protected" type="uint" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_metaData" fullname="cv.media:SoundPlayer/protected:_metaData" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_pan" fullname="cv.media:SoundPlayer/protected:_pan" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_paused" fullname="cv.media:SoundPlayer/protected:_paused" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_rightToLeft" fullname="cv.media:SoundPlayer/protected:_rightToLeft" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_rightToRight" fullname="cv.media:SoundPlayer/protected:_rightToRight" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="_status" fullname="cv.media:SoundPlayer/protected:_status" accessLevel="protected" type="String" isConst="false" isStatic="false" defaultValue="unloaded">
                     <versions/>
                  </field>
                  <field name="_volume" fullname="cv.media:SoundPlayer/protected:_volume" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue=".5">
                     <versions/>
                  </field>
                  <field name="autoRewind" fullname="cv.media:SoundPlayer/autoRewind" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Will automatically call stop (rewind) after playing complete. If disabled, this will pause
   the player instead.
   ]]></description>
                     <shortDescription><![CDATA[
   Will automatically call stop (rewind) after playing complete.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="debug" fullname="cv.media:SoundPlayer/debug" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Enables/Disables debug traces
   ]]></description>
                     <shortDescription><![CDATA[
   Enables/Disables debug traces
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="pausePosition" fullname="cv.media:SoundPlayer/protected:pausePosition" accessLevel="protected" type="int" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="playTimer" fullname="cv.media:SoundPlayer/protected:playTimer" accessLevel="protected" type="flash.utils:Timer" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="sc" fullname="cv.media:SoundPlayer/protected:sc" accessLevel="protected" type="flash.media:SoundChannel" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="sendOnce" fullname="cv.media:SoundPlayer/protected:sendOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="skipOnce" fullname="cv.media:SoundPlayer/protected:skipOnce" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="snd" fullname="cv.media:SoundPlayer/protected:snd" accessLevel="protected" type="flash.media:Sound" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="strURL" fullname="cv.media:SoundPlayer/protected:strURL" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="autoStart" fullname="cv.media:SoundPlayer/autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Whether media will play automatically once loaded.
   
   ]]></description>
                     <shortDescription><![CDATA[ 
   Whether media will play automatically once loaded.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </field>
                  <field name="buffer" fullname="cv.media:SoundPlayer/buffer/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets how long SoundPlayer should buffer the audio before 
   playing, in seconds.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets how long SoundPlayer should buffer the audio before 
   playing, in seconds.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentPercent" fullname="cv.media:SoundPlayer/currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current play progress in terms of percent
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="leftToLeft" fullname="cv.media:SoundPlayer/leftToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left 
   input is played in the left speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left 
   input is played in the left speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="leftToRight" fullname="cv.media:SoundPlayer/leftToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left 
   input is played in the right speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the left 
   input is played in the right speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadCurrent" fullname="cv.media:SoundPlayer/loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the current load progress in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadTotal" fullname="cv.media:SoundPlayer/loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total size to be loaded in terms of bytes
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="metaData" fullname="cv.media:SoundPlayer/metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   
   -MetaData
   Flash Player 9 and later supports ID3 2.0 tags, specifically 2.3 and 2.4
   -IDE 2.0 tag
   COMM Sound.id3.comment
   TABL Sound.id3.album
   TCON Sound.id3.genre
   TIT2 Sound.id3.songName
   TPE1 Sound.id3.artist
   TRCK Sound.id3.track
   TYER Sound.id3.year
   
   -ID3 Earlier
   TFLT File type
   TIME Time
   TIT1 Content group description
   TIT2 Title/song name/content description
   TIT3 Subtitle/description refinement
   TKEY Initial key
   TLAN Languages
   TLEN Length
   TMED Media type
   TOAL Original album/movie/show title
   TOFN Original filename
   TOLY Original lyricists/text writers
   TOPE Original artists/performers
   TORY Original release year
   TOWN File owner/licensee
   TPE1 Lead performers/soloists
   TPE2 Band/orchestra/accompaniment
   TPE3 Conductor/performer refinement
   TPE4 Interpreted, remixed, or otherwise modified by
   TPOS Part of a set
   TPUB Publisher
   TRCK Track number/position in set
   TRDA Recording dates
   TRSN Internet radio station name
   TRSO Internet radio station owner
   TSIZ Size
   TSRC ISRC (international standard recording code)
   TSSE Software/hardware and settings used for encoding
   TYER Year
   WXXX URL Link frame
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the metadata if available for the currently playing audio file
   
   -MetaData
   Flash Player 9 and later supports ID3 2.0 tags, specifically 2.3 and 2.4
   -IDE 2.0 tag
   COMM Sound.id3.comment
   TABL Sound.id3.album
   TCON Sound.id3.genre
   TIT2 Sound.id3.songName
   TPE1 Sound.id3.artist
   TRCK Sound.id3.track
   TYER Sound.id3.year
   
   -ID3 Earlier
   TFLT File type
   TIME Time
   TIT1 Content group description
   TIT2 Title/song name/content description
   TIT3 Subtitle/description refinement
   TKEY Initial key
   TLAN Languages
   TLEN Length
   TMED Media type
   TOAL Original album/movie/show title
   TOFN Original filename
   TOLY Original lyricists/text writers
   TOPE Original artists/performers
   TORY Original release year
   TOWN File owner/licensee
   TPE1 Lead performers/soloists
   TPE2 Band/orchestra/accompaniment
   TPE3 Conductor/performer refinement
   TPE4 Interpreted, remixed, or otherwise modified by
   TPOS Part of a set
   TPUB Publisher
   TRCK Track number/position in set
   TRDA Recording dates
   TRSN Internet radio station name
   TRSO Internet radio station owner
   TSIZ Size
   TSRC ISRC (international standard recording code)
   TSSE Software/hardware and settings used for encoding
   TYER Year
   WXXX URL Link frame
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="pan" fullname="cv.media:SoundPlayer/pan/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   The left-to-right panning of the sound, ranging from -1 (full pan 
   left) to 1 (full pan right). A value of 0 represents no panning 
   (balanced center between right and left). 
   ]]></description>
                     <shortDescription><![CDATA[ 
   The left-to-right panning of the sound, ranging from -1 (full pan 
   left) to 1 (full pan right).]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="paused" fullname="cv.media:SoundPlayer/paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the pause status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the pause status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="rightToLeft" fullname="cv.media:SoundPlayer/rightToLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right 
   input is played in the left speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right 
   input is played in the left speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="rightToRight" fullname="cv.media:SoundPlayer/rightToRight/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right 
   input is played in the right speaker.
   ]]></description>
                     <shortDescription><![CDATA[ 
   A value, from 0 (none) to 1 (all), specifying how much of the right 
   input is played in the right speaker.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="status" fullname="cv.media:SoundPlayer/status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns the load status of the player.
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the load status of the player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeCurrent" fullname="cv.media:SoundPlayer/timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the elapsed play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeLeft" fullname="cv.media:SoundPlayer/timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the remaining play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeTotal" fullname="cv.media:SoundPlayer/timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the total play time in milliseconds
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="volume" fullname="cv.media:SoundPlayer/volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the current volume, from 0 - 1
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="cv.events">
         <classes>
            <asClass name="LoadEvent" type="class" fullname="cv.events:LoadEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The LoadEvent class defines events for TempoLite and media players. 
  These events include the following:
  <ul>
  <li><code>LoadEvent.LOAD_START</code>: dispatched after a file has begun loading.</li>
  <li><code>LoadEvent.LOAD_PROGRESS</code>: dispatched while a file is loading.</li>
  <li><code>LoadEvent.LOAD_COMPLETE</code>: dispatched after a file has finished loading.</li>
  </ul>
  ]]></description>
               <shortDescription><![CDATA[
  The LoadEvent class defines events for TempoLite and media players.]]></shortDescription>
               <versions/>
               <author/>
               <eventsDefined>
                  <event name="loadComplete">
                     <classRef name="LoadEvent" fullName="cv.events:LoadEvent" packageName="cv.events" relativePath="../events/LoadEvent.html"/>
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></description>
                  </event>
                  <event name="loadProgress">
                     <classRef name="LoadEvent" fullName="cv.events:LoadEvent" packageName="cv.events" relativePath="../events/LoadEvent.html"/>
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></description>
                  </event>
                  <event name="loadStart">
                     <classRef name="LoadEvent" fullName="cv.events:LoadEvent" packageName="cv.events" relativePath="../events/LoadEvent.html"/>
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadStart</code> event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
      <tr>
              <th>Property</th>
              <th>Value</th>
            </tr>
      <tr>
              <td><code>bubbles</code></td>
              <td><code>false</code></td></tr>
      <tr><td><code>cancelable</code></td><td><code>false</code>; there is
            no default behavior to cancel.</td></tr> 
      <tr><td><code>time</code></td><td>The estimated duration of the media file.</td></tr>
      <tr><td><code>url</code></td><td>TThe url of the item being loaded.</td></tr>
      <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>index</code></td><td>The zero-based index in the DataProvider
      that contains the renderer.</td></tr>
      <tr><td><code>item</code></td><td>A reference to the data that belongs to the renderer.</td></tr>
      <tr><td><code>mediaType</code></td><td>The type of media being loaded, either "audio" or "video".</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
          </table>
                  ]]></description>
                  </event>
               </eventsDefined>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="LoadEvent" fullname="cv.events:LoadEvent/LoadEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new LoadEvent object with the specified parameters. 
   
         ]]></description>
                     <shortDescription><![CDATA[
   Creates a new LoadEvent object with the specified parameters.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[The event type; this value identifies the action that caused the event.
                  ]]></description>
                        </param>
                        <param name="bubbles" type="Boolean" default="false">
                           <description><![CDATA[Indicates whether the event can bubble up the display list hierarchy.
                  ]]></description>
                        </param>
                        <param name="cancelable" type="Boolean" default="false">
                           <description><![CDATA[Indicates whether the behavior associated with the event can be
          prevented. 
   
         ]]></description>
                        </param>
                        <param name="url" type="String" default="">
                           <description><![CDATA[The url of the item being loaded.
                  ]]></description>
                        </param>
                        <param name="mediaType" type="cv.interfaces:IMediaPlayer" default="null">
                           <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                           <description><![CDATA[The type of media being loaded, either "audio" or "video".
                  ]]></description>
                        </param>
                        <param name="time" type="Number" default="0">
                           <description><![CDATA[The estimated duration of the media file.
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="cv.events:LoadEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a copy of the LoadEvent object and sets the value of each parameter to match
   the original.
            ]]></description>
                     <shortDescription><![CDATA[
   Creates a copy of the LoadEvent object and sets the value of each parameter to match
   the original.]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"><![CDATA[A new LoadEvent object with parameter values that match those of the original.
   ]]></result>
                  </method>
                  <method name="toString" fullname="cv.events:LoadEvent/toString" accessLevel="public" result_type="String" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns a string that contains all the properties of the LoadEvent object. The string
   is in the following format:
   
   <p>[<code>LoadEvent type=<em>value</em> bubbles=<em>value</em>
    cancelable=<em>value</em> url=<em>value</em>
    mediaType=<em>value</em> time=<em>value</em></code>]</p>
            ]]></description>
                     <shortDescription><![CDATA[
   Returns a string that contains all the properties of the LoadEvent object.]]></shortDescription>
                     <versions/>
                     <result type="String"><![CDATA[A string representation of the LoadEvent object.
   ]]></result>
                  </method>
               </methods>
               <fields>
                  <field name="LOAD_COMPLETE" fullname="cv.events:LoadEvent/LOAD_COMPLETE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="loadComplete">
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></description>
                     <shortDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="LOAD_PROGRESS" fullname="cv.events:LoadEvent/LOAD_PROGRESS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="loadProgress">
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></description>
                     <shortDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="LOAD_START" fullname="cv.events:LoadEvent/LOAD_START" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="loadStart">
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadStart</code> event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
      <tr>
              <th>Property</th>
              <th>Value</th>
            </tr>
      <tr>
              <td><code>bubbles</code></td>
              <td><code>false</code></td></tr>
      <tr><td><code>cancelable</code></td><td><code>false</code>; there is
            no default behavior to cancel.</td></tr> 
      <tr><td><code>time</code></td><td>The estimated duration of the media file.</td></tr>
      <tr><td><code>url</code></td><td>TThe url of the item being loaded.</td></tr>
      <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>index</code></td><td>The zero-based index in the DataProvider
      that contains the renderer.</td></tr>
      <tr><td><code>item</code></td><td>A reference to the data that belongs to the renderer.</td></tr>
      <tr><td><code>mediaType</code></td><td>The type of media being loaded, either "audio" or "video".</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
          </table>
                  ]]></description>
                     <shortDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadStart</code> event object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="mediaType" fullname="cv.events:LoadEvent/mediaType" accessLevel="public" type="cv.interfaces:IMediaPlayer" isConst="false" isStatic="false">
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="../interfaces/IMediaPlayer.html"/>
                     <description><![CDATA[
   Gets the media type of the item that is associated with this event.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the media type of the item that is associated with this event.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="time" fullname="cv.events:LoadEvent/time" accessLevel="public" type="Number" isConst="false" isStatic="false">
                     <description><![CDATA[
   Gets the duration of the item that is associated with this event.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the duration of the item that is associated with this event.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="url" fullname="cv.events:LoadEvent/url" accessLevel="public" type="String" isConst="false" isStatic="false">
                     <description><![CDATA[
   Gets the url of the item that is associated with this event.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the url of the item that is associated with this event.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="MetaDataEvent" type="class" fullname="cv.events:MetaDataEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The MetaDataEvent class defines events for media players. 
  These events include the following:
  <ul>
  <li><code>MetaDataEvent.METADATA</code>: dispatched when the player has recieved metadata.</li>
  <li><code>MetaDataEvent.BAND_WIDTH</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.CAPTION</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.CAPTION_INFO</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.CUE_POINT</code>: dispatched when the player has reached a cuepoint.</li>
  <li><code>MetaDataEvent.FC_SUBSCRIBE</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.IMAGE_DATA</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.LAST_SECOND</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.PLAY_STATUS</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.TEXT_DATA</code>: dispatched when using FMS.</li>
  <li><code>MetaDataEvent.RTMP_SAMPLE_ACCESS</code>: dispatched when using FMS.</li>
  </ul>
  ]]></description>
               <shortDescription><![CDATA[
  The MetaDataEvent class defines events for media players.]]></shortDescription>
               <versions/>
               <author/>
               <eventsDefined>
                  <event name="metadata">
                     <classRef name="MetaDataEvent" fullName="cv.events:MetaDataEvent" packageName="cv.events" relativePath="../events/MetaDataEvent.html"/>
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></description>
                  </event>
               </eventsDefined>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="MetaDataEvent" fullname="cv.events:MetaDataEvent/MetaDataEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new MetaDataEvent object with the specified parameters. 
   
         ]]></description>
                     <shortDescription><![CDATA[
   Creates a new MetaDataEvent object with the specified parameters.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[The event type; this value identifies the action that caused the event.
                  ]]></description>
                        </param>
                        <param name="data" type="Object" default="null">
                           <description><![CDATA[Indicates whether the event can bubble up the display list hierarchy.
                  ]]></description>
                        </param>
                        <param name="bubbles" type="Boolean" default="false">
                           <description><![CDATA[Indicates whether the behavior associated with the event can be
          prevented. 
   
         ]]></description>
                        </param>
                        <param name="cancelable" type="Boolean" default="false">
                           <description><![CDATA[The metadata object.
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="cv.events:MetaDataEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a copy of the MetaDataEvent object and sets the value of each parameter to match
   the original.
            ]]></description>
                     <shortDescription><![CDATA[
   Creates a copy of the MetaDataEvent object and sets the value of each parameter to match
   the original.]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"><![CDATA[A new MetaDataEvent object with parameter values that match those of the original.
   ]]></result>
                  </method>
                  <method name="toString" fullname="cv.events:MetaDataEvent/toString" accessLevel="public" result_type="String" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns a string that contains all the properties of the MetaDataEvent object. The string
   is in the following format:
   
   <p>[<code>MetaDataEvent type=<em>value</em> bubbles=<em>value</em>
    cancelable=<em>value</em> data=<em>value</em></code>]</p>
            ]]></description>
                     <shortDescription><![CDATA[
   Returns a string that contains all the properties of the MetaDataEvent object.]]></shortDescription>
                     <versions/>
                     <result type="String"><![CDATA[A string representation of the MetaDataEvent object.
   ]]></result>
                  </method>
               </methods>
               <fields>
                  <field name="BAND_WIDTH" fullname="cv.events:MetaDataEvent/BAND_WIDTH" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="bandwidth">
                     <versions/>
                  </field>
                  <field name="CAPTION" fullname="cv.events:MetaDataEvent/CAPTION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="caption">
                     <versions/>
                  </field>
                  <field name="CAPTION_INFO" fullname="cv.events:MetaDataEvent/CAPTION_INFO" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="captionInfo">
                     <versions/>
                  </field>
                  <field name="CUE_POINT" fullname="cv.events:MetaDataEvent/CUE_POINT" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="cuePoint">
                     <versions/>
                  </field>
                  <field name="FC_SUBSCRIBE" fullname="cv.events:MetaDataEvent/FC_SUBSCRIBE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="fcSubscribe">
                     <versions/>
                  </field>
                  <field name="IMAGE_DATA" fullname="cv.events:MetaDataEvent/IMAGE_DATA" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="imageData">
                     <versions/>
                  </field>
                  <field name="LAST_SECOND" fullname="cv.events:MetaDataEvent/LAST_SECOND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="lastSecond">
                     <versions/>
                  </field>
                  <field name="METADATA" fullname="cv.events:MetaDataEvent/METADATA" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="metadata">
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></description>
                     <shortDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="PLAY_STATUS" fullname="cv.events:MetaDataEvent/PLAY_STATUS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="playStatus">
                     <versions/>
                  </field>
                  <field name="RTMP_SAMPLE_ACCESS" fullname="cv.events:MetaDataEvent/RTMP_SAMPLE_ACCESS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="RTMPSampleAccess">
                     <versions/>
                  </field>
                  <field name="TEXT_DATA" fullname="cv.events:MetaDataEvent/TEXT_DATA" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="textData">
                     <versions/>
                  </field>
                  <field name="data" fullname="cv.events:MetaDataEvent/data" accessLevel="public" type="Object" isConst="false" isStatic="false">
                     <description><![CDATA[
         The reference to the data object.
   ]]></description>
                     <shortDescription><![CDATA[
         The reference to the data object.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="PlayProgressEvent" type="class" fullname="cv.events:PlayProgressEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The PlayProgressEvent class defines events for media players. 
  These events include the following:
  <ul>
  <li><code>PlayProgressEvent.PLAY_START</code>: dispatched when playback has begun.</li>
  <li><code>PlayProgressEvent.PLAY_PROGRESS</code>: dispatched constantly during playback.</li>
  <li><code>PlayProgressEvent.PLAY_COMPLETE</code>: dispatched when playback is complete.</li>
  <li><code>PlayProgressEvent.STATUS</code>: dispatched whenever status has changed.</li>
  <li><code>PlayProgressEvent.LOADING</code>: constant used to verify file is loading.</li>
  <li><code>PlayProgressEvent.LOADED</code>: constant used to verify file is loaded but hasn't played once yet.</li>
  <li><code>PlayProgressEvent.STARTED</code>: constant used to verify file has started playing atleast once.</li>
  <li><code>PlayProgressEvent.UNLOADED</code>: constant used to verify file is unlaoded.</li>
  </ul>
  ]]></description>
               <shortDescription><![CDATA[
  The PlayProgressEvent class defines events for media players.]]></shortDescription>
               <versions/>
               <author/>
               <eventsDefined>
                  <event name="playProgress">
                     <classRef name="PlayProgressEvent" fullName="cv.events:PlayProgressEvent" packageName="cv.events" relativePath="../events/PlayProgressEvent.html"/>
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></description>
                  </event>
               </eventsDefined>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="PlayProgressEvent" fullname="cv.events:PlayProgressEvent/PlayProgressEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new PlayProgressEvent object with the specified parameters. 
   
         ]]></description>
                     <shortDescription><![CDATA[
   Creates a new PlayProgressEvent object with the specified parameters.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[The event type; this value identifies the action that caused the event.
                  ]]></description>
                        </param>
                        <param name="bubbles" type="Boolean" default="false">
                           <description><![CDATA[Indicates whether the event can bubble up the display list hierarchy.
                  ]]></description>
                        </param>
                        <param name="cancelable" type="Boolean" default="false">
                           <description><![CDATA[Indicates whether the behavior associated with the event can be
          prevented. 
   
         ]]></description>
                        </param>
                        <param name="percent" type="uint" default="0">
                           <description><![CDATA[The play progress in terms of percent.
   
         ]]></description>
                        </param>
                        <param name="elapsed" type="Number" default="0">
                           <description><![CDATA[The time elapsed in terms of milliseconds.
   
         ]]></description>
                        </param>
                        <param name="remain" type="Number" default="0">
                           <description><![CDATA[The time remaining in terms of milliseconds.
   
         ]]></description>
                        </param>
                        <param name="total" type="Number" default="0">
                           <description><![CDATA[The total time in terms of milliseconds.
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="cv.events:PlayProgressEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a copy of the PlayProgressEvent object and sets the value of each parameter to match
   the original.
            ]]></description>
                     <shortDescription><![CDATA[
   Creates a copy of the PlayProgressEvent object and sets the value of each parameter to match
   the original.]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"><![CDATA[A new PlayProgressEvent object with parameter values that match those of the original.
   ]]></result>
                  </method>
                  <method name="toString" fullname="cv.events:PlayProgressEvent/toString" accessLevel="public" result_type="String" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns a string that contains all the properties of the PlayProgressEvent object. The string
   is in the following format:
   
   <p>[<code>PlayProgressEvent type=<em>value</em> bubbles=<em>value</em>
    cancelable=<em>value</em> percent=<em>value</em> elapsed=<em>value</em> remain=<em>value</em> total=<em>value</em></code>]</p>
            ]]></description>
                     <shortDescription><![CDATA[
   Returns a string that contains all the properties of the PlayProgressEvent object.]]></shortDescription>
                     <versions/>
                     <result type="String"><![CDATA[A string representation of the PlayProgressEvent object.
   ]]></result>
                  </method>
               </methods>
               <fields>
                  <field name="LOADED" fullname="cv.events:PlayProgressEvent/LOADED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="loaded">
                     <versions/>
                  </field>
                  <field name="LOADING" fullname="cv.events:PlayProgressEvent/LOADING" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="loading">
                     <versions/>
                  </field>
                  <field name="PLAY_COMPLETE" fullname="cv.events:PlayProgressEvent/PLAY_COMPLETE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="playComplete">
                     <versions/>
                  </field>
                  <field name="PLAY_PROGRESS" fullname="cv.events:PlayProgressEvent/PLAY_PROGRESS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="playProgress">
                     <description><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></description>
                     <shortDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="PLAY_START" fullname="cv.events:PlayProgressEvent/PLAY_START" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="playStart">
                     <versions/>
                  </field>
                  <field name="STARTED" fullname="cv.events:PlayProgressEvent/STARTED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="started">
                     <versions/>
                  </field>
                  <field name="STATUS" fullname="cv.events:PlayProgressEvent/STATUS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="status">
                     <versions/>
                  </field>
                  <field name="UNLOADED" fullname="cv.events:PlayProgressEvent/UNLOADED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="unloaded">
                     <versions/>
                  </field>
                  <field name="elapsed" fullname="cv.events:PlayProgressEvent/elapsed" accessLevel="public" type="Number" isConst="false" isStatic="false">
                     <description><![CDATA[
         The reference to the elapsed time of the media playing.
   ]]></description>
                     <shortDescription><![CDATA[
         The reference to the elapsed time of the media playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="percent" fullname="cv.events:PlayProgressEvent/percent" accessLevel="public" type="uint" isConst="false" isStatic="false">
                     <description><![CDATA[
         The reference to the percentage of progress for the media playing.
   ]]></description>
                     <shortDescription><![CDATA[
         The reference to the percentage of progress for the media playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="remain" fullname="cv.events:PlayProgressEvent/remain" accessLevel="public" type="Number" isConst="false" isStatic="false">
                     <description><![CDATA[
         The reference to the remaining time of the media playing.
   ]]></description>
                     <shortDescription><![CDATA[
         The reference to the remaining time of the media playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="total" fullname="cv.events:PlayProgressEvent/total" accessLevel="public" type="Number" isConst="false" isStatic="false">
                     <description><![CDATA[
         The reference to the total time of the media playing.
   ]]></description>
                     <shortDescription><![CDATA[
         The reference to the total time of the media playing.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="cv.data">
         <classes>
            <asClass name="PlayList" type="class" fullname="cv.data:PlayList" accessLevel="public" isFinal="false" isDynamic="true" packageName="cv.data" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The PlayList class extends the Array class and enables the management
  of a list of items. This includes selecting next, previous, repeat, 
  repeat all, and shuffling. Also allows for a current index, so the
  selected item can be tracked.
     ]]></description>
               <shortDescription><![CDATA[
  The PlayList class extends the Array class and enables the management
  of a list of items.]]></shortDescription>
               <versions/>
               <author/>
               <eventsGenerated>
                  <event name="startoflist" owner="cv.data:PlayList" typeName="START_OF_LIST">
                     <description><![CDATA[
  Dispatched when the playlist has started playing the first item.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the playlist has started playing the first item.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#previousIndex" label="previousIndex"/>
                     </sees>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="endoflist" owner="cv.data:PlayList" typeName="END_OF_LIST">
                     <description><![CDATA[
  Dispatched when the playlist has reached the end of the playlist.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the playlist has reached the end of the playlist.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#nextIndex" label="nextIndex"/>
                     </sees>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="change" owner="cv.data:PlayList" typeName="CHANGE">
                     <description><![CDATA[
  Dispatched when the index has changed or <code>getNext()</code> and <code>getPrevious()</code> were called.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched when the index has changed or <code>getNext()</code> and <code>getPrevious()</code> were called.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#getPrevious()" label="getPrevious()"/>
                        <see href="../data/PlayList.html#getNext()" label="getNext()"/>
                        <see href="../data/PlayList.html#index" label="index"/>
                     </sees>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
               </eventsGenerated>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="flash.events.IEventDispatcher" fullName="flash.events.IEventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="PlayList" fullname="cv.data:PlayList/PlayList" accessLevel="public" result_type="void" inheritDoc="false">
                     <description><![CDATA[
   Creates a new PlayList object. You can pass it a DataProvider object
   into the constructor and it will populate the PlayList.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a new PlayList object.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="dp" type="Object" default="null">
                           <description><![CDATA[The DataProvider object
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="addEventListener" fullname="cv.data:PlayList/addEventListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Registers an event listener object with an EventDispatcher object so that the listener
    receives notification of an event. You can register event listeners on all nodes in the
    display list for a specific type of event, phase, and priority.
      ]]></description>
                     <shortDescription><![CDATA[
   Registers an event listener object with an EventDispatcher object so that the listener
    receives notification of an event.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[             <String> The type of event.
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[         <Function> The listener function that processes the event. This function must accept
                              an Event object as its only parameter and must return nothing, as this example shows:
                              function(evt:Event):void
                              The function can have any name.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[       <Boolean (default = false)> Determines whether the listener works in the capture phase or the
                              target and bubbling phases. If useCapture is set to true,
                              the listener processes the event only during the capture phase and not in the
                              target or bubbling phase. If useCapture is false, the
                              listener processes the event only during the target or bubbling phase. To listen for
                              the event in all three phases, call addEventListener twice, once with
                              useCapture set to true, then again with
                              useCapture set to false.
   ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[         <int (default = 0)> The priority level of the event listener. The priority is designated by
                              a signed 32-bit integer. The higher the number, the higher the priority. All listeners
                              with priority n are processed before listeners of priority n-1. If two
                              or more listeners share the same priority, they are processed in the order in which they
                              were added. The default priority is 0.
   ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="false">
                           <description><![CDATA[ <Boolean (default = false)> Determines whether the reference to the listener is strong or
                              weak. A strong reference (the default) prevents your listener from being garbage-collected.
                              A weak reference does not. Class-level member functions are not subject to garbage
                              collection, so you can set useWeakReference to true for
                              class-level member functions without subjecting them to garbage collection. If you set
                              useWeakReference to true for a listener that is a nested inner
                              function, the function will be garbage-collected and no longer persistent. If you create
                              references to the inner function (save it in another variable) then it is not
                              garbage-collected and stays persistent.
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="dispatchEvent" fullname="cv.data:PlayList/dispatchEvent" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Dispatches an event into the event flow. The event target is the EventDispatcher
    object upon which the dispatchEvent() method is called.
      ]]></description>
                     <shortDescription><![CDATA[
   Dispatches an event into the event flow.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[                 <Boolean> A value of true if the event was successfully dispatched. A value of false indicates failure or that preventDefault() was called
                              on the event.
   
   ]]></result>
                     <params>
                        <param name="evt" type="flash.events:Event">
                           <description><![CDATA[            <Event> The Event object that is dispatched into the event flow.
                              If the event is being redispatched, a clone of the event is created automatically.
                              After an event is dispatched, its target property cannot be changed, so you
                              must create a new copy of the event for redispatching to work.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getCurrent" fullname="cv.data:PlayList/getCurrent" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the current item from the playlist
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the current item from the playlist
   
   ]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[<Object> The current item
   ]]></result>
                  </method>
                  <method name="getNext" fullname="cv.data:PlayList/getNext" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the next item from the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the next item from the playlist.]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[<Object> The next item
   
   ]]></result>
                     <sees>
                        <see href="../data/PlayList.html#event:change" label="change"/>
                        <see href="../data/PlayList.html#nextIndex" label="nextIndex"/>
                     </sees>
                  </method>
                  <method name="getPrevious" fullname="cv.data:PlayList/getPrevious" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the previous item from the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the previous item from the playlist.]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[<Object> The previous item
   
   ]]></result>
                     <sees>
                        <see href="../data/PlayList.html#event:change" label="change"/>
                        <see href="../data/PlayList.html#previousIndex" label="previousIndex"/>
                     </sees>
                  </method>
                  <method name="getRandom" fullname="cv.data:PlayList/getRandom" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns a random item from the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns a random item from the playlist.]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[<Object> The item selected at random
   
   ]]></result>
                     <sees>
                        <see href="../data/PlayList.html#getRandomIndex()" label="getRandomIndex()"/>
                     </sees>
                  </method>
                  <method name="getRandomIndex" fullname="cv.data:PlayList/getRandomIndex" accessLevel="public" result_type="uint" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns a random index from the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Returns a random index from the playlist.]]></shortDescription>
                     <versions/>
                     <result type="uint"><![CDATA[<uint> The index randomly selected
   
   ]]></result>
                     <sees>
                        <see href="../data/PlayList.html#getRandom()" label="getRandom()"/>
                     </sees>
                  </method>
                  <method name="hasEventListener" fullname="cv.data:PlayList/hasEventListener" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Checks whether the EventDispatcher object has any listeners registered for a specific type
    of event. This allows you to determine where an EventDispatcher object has altered
    handling of an event type in the event flow hierarchy. To determine whether a specific
    event type actually triggers an event listener, use willTrigger().
      ]]></description>
                     <shortDescription><![CDATA[
   Checks whether the EventDispatcher object has any listeners registered for a specific type
    of event.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[                 <Boolean> A value of true if a listener of the specified type is registered;
                              false otherwise.
   
   ]]></result>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[             <String> The type of event.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="inPlayList" fullname="cv.data:PlayList/inPlayList" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Searchs the playlist to determin if an item is listed.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Searchs the playlist to determin if an item is listed.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[<Boolean> Whether the item is in the playlist or not.
   ]]></result>
                     <params>
                        <param name="item" type="Object">
                           <description><![CDATA[ <Object> The item to be checked for.
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="remove" fullname="cv.data:PlayList/remove" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes the given item from the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Removes the given item from the playlist.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[<Boolean> Whether the removal was successful or not.
   ]]></result>
                     <params>
                        <param name="item" type="Object">
                           <description><![CDATA[ <Object> The item object to be removed
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeAt" fullname="cv.data:PlayList/removeAt" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes an item at a given index.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Removes an item at a given index.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[<Boolean> Whether the removal was successful or not.
   ]]></result>
                     <params>
                        <param name="idx" type="uint">
                           <description><![CDATA[<uint> The index of the item to be removed.
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeEventListener" fullname="cv.data:PlayList/removeEventListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
      ]]></description>
                     <shortDescription><![CDATA[
   Removes a listener from the EventDispatcher object.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[             <String> The type of event.
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[         <Function> The listener object to remove.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[       <Boolean (default = false)> Specifies whether the listener was registered for the capture phase or the
                              target and bubbling phases. If the listener was registered for both the capture phase and the
                              target and bubbling phases, two calls to removeEventListener() are required
                              to remove both, one call with useCapture() set to true, and another
                              call with useCapture() set to false.
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setMimes" fullname="cv.data:PlayList/protected:setMimes" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Sets the mimetypes allowed by PlayList.
   ]]></description>
                     <shortDescription><![CDATA[
   Sets the mimetypes allowed by PlayList.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="toDataProviderArray" fullname="cv.data:PlayList/toDataProviderArray" accessLevel="public" result_type="Array" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts the PlayList to an array for use with
   DataProvider and AS3 components.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Converts the PlayList to an array for use with
   DataProvider and AS3 components.]]></shortDescription>
                     <versions/>
                     <result type="Array"><![CDATA[The array equivalent of the playlist.
   ]]></result>
                  </method>
                  <method name="toSeconds" fullname="cv.data:PlayList/protected:toSeconds" accessLevel="protected" result_type="int" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts a string version of a time format into the seconds equivalent.
      ]]></description>
                     <shortDescription><![CDATA[
   Converts a string version of a time format into the seconds equivalent.]]></shortDescription>
                     <versions/>
                     <result type="int"><![CDATA[                 <Int> The number of seconds for the given time.
   ]]></result>
                     <params>
                        <param name="str" type="String">
                           <description><![CDATA[             <String> The string to convert.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="willTrigger" fullname="cv.data:PlayList/willTrigger" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Checks whether an event listener is registered with this EventDispatcher object or any of
    its ancestors for the specified event type. This method returns true if an
    event listener is triggered during any phase of the event flow when an event of the
    specified type is dispatched to this EventDispatcher object or any of its descendants.
      ]]></description>
                     <shortDescription><![CDATA[
   Checks whether an event listener is registered with this EventDispatcher object or any of
    its ancestors for the specified event type.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[                 <Boolean> A value of true if a listener of the specified type will be triggered; false otherwise.
   
   ]]></result>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[             <String> The type of event.
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="CHANGE" fullname="cv.data:PlayList/CHANGE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="change">
                     <description><![CDATA[
         The <code>PlayList.CHANGE</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has changed in some way.
   ]]></description>
                     <shortDescription><![CDATA[
         The <code>PlayList.CHANGE</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has changed in some way.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="END_OF_LIST" fullname="cv.data:PlayList/END_OF_LIST" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="endoflist">
                     <description><![CDATA[
         The <code>PlayList.END_OF_LIST</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has reached the end of the list.
   ]]></description>
                     <shortDescription><![CDATA[
         The <code>PlayList.END_OF_LIST</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has reached the end of the list.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="START_OF_LIST" fullname="cv.data:PlayList/START_OF_LIST" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="startoflist">
                     <description><![CDATA[
         The <code>PlayList.START_OF_LIST</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has reached the beginning of the list.
   ]]></description>
                     <shortDescription><![CDATA[
         The <code>PlayList.START_OF_LIST</code> constant defines the value of
   the <code>type</code> property of the event object that is dispatched to indicate that
   the playlist has reached the beginning of the list.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="index" fullname="cv.data:PlayList/index/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets the current selected item in the playlist.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets the current selected item in the playlist.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#event:change" label="change"/>
                     </sees>
                     <customs>
                        <default><![CDATA[0
   
   ]]></default>
                     </customs>
                  </field>
                  <field name="nextIndex" fullname="cv.data:PlayList/nextIndex/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the index of the next item in the playlist.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the index of the next item in the playlist.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#event:endoflist" label="endoflist"/>
                     </sees>
                  </field>
                  <field name="previousIndex" fullname="cv.data:PlayList/previousIndex/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Gets the index of the previous item in the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[ 
   Gets the index of the previous item in the playlist.]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../data/PlayList.html#event:startoflist" label="startoflist"/>
                     </sees>
                  </field>
                  <field name="repeat" fullname="cv.data:PlayList/repeat/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets whether an item is repeated after it's finished.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets whether an item is repeated after it's finished.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[false
   ]]></default>
                     </customs>
                  </field>
                  <field name="repeatAll" fullname="cv.data:PlayList/repeatAll/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets whether the playlist repeats when it's finished.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets whether the playlist repeats when it's finished.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[false
   ]]></default>
                     </customs>
                  </field>
                  <field name="shuffle" fullname="cv.data:PlayList/shuffle/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Gets or sets whether shuffle is enabled or not.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Gets or sets whether shuffle is enabled or not.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[false
   ]]></default>
                     </customs>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="cv">
         <classes>
            <asClass name="TempoLite" type="class" fullname="cv:TempoLite" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  <h3>Version:</h3> 3.0.1<br>
  <h3>Date:</h3> 3/06/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  TempoLite is based off of its sister project Tempo this is a parsed down version that 
  does not handle a UI. TempoLite is best compared with players like video.Maru, in 
  the sense that it’s just a component that is dragged on stage and handles all of 
  the media playback. This allows for a UI as complicated as you want to make it while 
  the actually playback is handled by TempoLite.
  <br>
  <br>
  <h3>Coded By:</h3> Gabriel Mariani, gabriel[at]coursevector.com<br>
  Copyright 2009, Course Vector (This work is subject to the terms in http://blog.coursevector.com/terms.)<br>
  <br>
  <h3>Notes:</h3>
  <ul>
    <li>This class will add about 15kb to your Flash file.</li>
  </ul>
  <hr>
  <ul>
  <li>3.0.2
  <ul>
    <li>Changed loadCurrent and loadTotal to uint</li>
  </ul>
  </li>
  <li>3.0.1
  <ul>
    <li>load() and seek() are now typed to  </li>
  </ul>
  </li>
  <li>3.0.0
  <ul>
    <li>Changed unloadMedia() to just unload()</li>
    <li>Changed bufferTime to just buffer</li>
  </ul>
  </li>
  </ul>
  
  ]]></description>
               <shortDescription><![CDATA[
  <h3>Version:</h3> 3.0.1<br>
  <h3>Date:</h3> 3/06/2009<br>
  <h3>Updates At:</h3> http://blog.coursevector.com/tempolite<br>
  <br>
  TempoLite is based off of its sister project Tempo this is a parsed down version that 
  does not handle a UI.]]></shortDescription>
               <versions/>
               <author/>
               <example><![CDATA[This is the same code as in the TempoLiteDemo.fla
  <br/><br/>
  <listing version="3.0">
  import cv.TempoLite;
  import cv.media.SoundPlayer;
  import cv.media.NetStreamPlayer;
  import cv.media.RTMPPlayer;
  import cv.media.ImagePlayer;
  import flash.events.Event;
  import cv.events.LoadEvent;
  import cv.events.PlayProgressEvent;
  import cv.events.MetaDataEvent;
  import cv.formats.
  
  var tempo:TempoLite = new TempoLite(null, [ASX, ATOM, B4S, M3U, PLS, XSPF]);
  tempo.debug = true;
  
  var nsP:NetStreamPlayer = new NetStreamPlayer();
  nsP.video = vidScreen;
  tempo.addPlayer(nsP);
  nsP.debug = true;
  
  var sndP:SoundPlayer = new SoundPlayer();
  sndP.debug = true;
  tempo.addPlayer(sndP);
  
  var imgP:ImagePlayer = new ImagePlayer();
  this.addChildAt(imgP, 0);
  imgP.debug = true;
  tempo.addPlayer(imgP);
  
  var rtP:RTMPPlayer = new RTMPPlayer();
  rtP.streamHost = "rtmp://cp34534.edgefcs.net/ondemand";
  //rtP.video = vidScreen;
  //rtP.debug = true;
  //tempo.addPlayer(rtP);
  
  //tempo.load("images/2_1600.jpg");
  //tempo.load({url:"34548/PodcastIntro", extOverride:"flv"});
  //tempo.load("music/01 Sunrise Projector.mp3");
  //tempo.loadPlayList("playlists/xspf_example.xml");
  //tempo.loadPlayList("playlists/pls_example.pls");
  //tempo.loadPlayList("playlists/m3u_example.m3u");
  //tempo.loadPlayList("playlists/b4s_example.b4s");
  //tempo.loadPlayList("playlists/asx_example.xml");
  tempo.loadPlayList("playlists/atom_example.xml");
  </listing>
     ]]></example>
               <eventsGenerated>
                  <event name="metadata" owner="cv:TempoLite" typeName="METADATA">
                     <description><![CDATA[
  Dispatched as metadata is receieved from a player
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as metadata is receieved from a player
    ]]></shortDescription>
                     <eventType href="events/MetaDataEvent.html#METADATA" label="cv.events.MetaDataEvent.METADATA"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>audioMetadata</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>data</code></td><td>The metadata object.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="status" owner="cv:TempoLite" typeName="STATUS">
                     <description><![CDATA[
  Dispatched whenever the isPlaying, isReadyToPlay or isPause properties have changed.
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched whenever the isPlaying, isReadyToPlay or isPause properties have changed.]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="refreshPlaylist" owner="cv:TempoLite" typeName="REFRESH_PLAYLIST">
                     <description><![CDATA[
  Dispatched from the PlayListManager when ever an item is removed, or updated, or the entire list is updated
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched from the PlayListManager when ever an item is removed, or updated, or the entire list is updated
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="previous" owner="cv:TempoLite" typeName="PREVIOUS">
                     <description><![CDATA[
  Dispatched after Tempo has begun loading the previous item
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched after Tempo has begun loading the previous item
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="playStart" owner="cv:TempoLite" typeName="PLAY_START">
                     <description><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched once as a media file first begins to play
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="playProgress" owner="cv:TempoLite" typeName="PLAY_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is playing
    ]]></shortDescription>
                     <eventType href="events/PlayProgressEvent.html#PLAY_PROGRESS" label="cv.events.PlayProgressEvent.PLAY_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an <code>playProgress</code> 
   event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
       <tr><th>Property</th><th>Value</th></tr>
       <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>
       <tr><td><code>cancelable</code></td><td><code>false</code>; there is 
            no default behavior to cancel.</td></tr> 
      <tr><td><code>percent</code></td><td>The percentage of progress for the media playing.</td></tr>
      <tr><td><code>elapsed</code></td><td>The elapsed time of the media playing.</td></tr>
      <tr><td><code>remain</code></td><td>The remaining time of the media playing.</td></tr>
      <tr><td><code>total</code></td><td>The total time of the media playing.</td></tr>
       <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
    </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="events/PlayProgressEvent.html" label="cv.events.PlayProgressEvent"/>
                  </event>
                  <event name="playComplete" owner="cv:TempoLite" typeName="PLAY_COMPLETE">
                     <description><![CDATA[
  Dispatched as a media file finishes playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file finishes playing
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="next" owner="cv:TempoLite" typeName="NEXT">
                     <description><![CDATA[
  Dispatched after Tempo has begun loading the next item, also at the end of an item playing
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched after Tempo has begun loading the next item, also at the end of an item playing
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="loadStart" owner="cv:TempoLite" typeName="LOAD_START">
                     <description><![CDATA[
  Dispatched as a media file begins loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file begins loading
    ]]></shortDescription>
                     <eventType href="events/LoadEvent.html#LOAD_START" label="cv.events.LoadEvent.LOAD_START"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadStart</code> event object. 
   
   <p>This event has the following properties:</p>
    <table class="innertable" width="100%">
      <tr>
              <th>Property</th>
              <th>Value</th>
            </tr>
      <tr>
              <td><code>bubbles</code></td>
              <td><code>false</code></td></tr>
      <tr><td><code>cancelable</code></td><td><code>false</code>; there is
            no default behavior to cancel.</td></tr> 
      <tr><td><code>time</code></td><td>The estimated duration of the media file.</td></tr>
      <tr><td><code>url</code></td><td>TThe url of the item being loaded.</td></tr>
      <tr><td><code>currentTarget</code></td><td>The object that is actively processing 
                  the event object with an event listener.</td></tr>
      <tr><td><code>index</code></td><td>The zero-based index in the DataProvider
      that contains the renderer.</td></tr>
      <tr><td><code>item</code></td><td>A reference to the data that belongs to the renderer.</td></tr>
      <tr><td><code>mediaType</code></td><td>The type of media being loaded, either "audio" or "video".</td></tr>
      <tr><td><code>target</code></td><td>The object that dispatched the event. The target is 
                   not always the object listening for the event. Use the <code>currentTarget</code>
      property to access the object that is listening for the event.</td></tr>
          </table>
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="loadProgress" owner="cv:TempoLite" typeName="LOAD_PROGRESS">
                     <description><![CDATA[
  Dispatched as a media file is loaded
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file is loaded
    ]]></shortDescription>
                     <eventType href="events/LoadEvent.html#LOAD_PROGRESS" label="cv.events.LoadEvent.LOAD_PROGRESS"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadProgress</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.ProgressEvent"/>
                  </event>
                  <event name="loadComplete" owner="cv:TempoLite" typeName="LOAD_COMPLETE">
                     <description><![CDATA[
  Dispatched as a media file has completed loading
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched as a media file has completed loading
    ]]></shortDescription>
                     <eventType href="events/LoadEvent.html#LOAD_COMPLETE" label="cv.events.LoadEvent.LOAD_COMPLETE"/>
                     <eventDescription><![CDATA[
         Defines the value of the <code>type</code> property of an  
   <code>loadComplete</code> event object. 
                  ]]></eventDescription>
                     <versions/>
                     <eventObject href="events/LoadEvent.html" label="cv.events.LoadEvent"/>
                  </event>
                  <event name="cuePoint" owner="cv:TempoLite" typeName="CUE_POINT">
                     <description><![CDATA[
  Dispatched everytime a cue point is encountered
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched everytime a cue point is encountered
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="events/MetaDataEvent.html" label="cv.events.MetaDataEvent"/>
                  </event>
                  <event name="change" owner="cv:TempoLite" typeName="CHANGE">
                     <description><![CDATA[
  Dispatched from the PlayList when a change has occured
    ]]></description>
                     <shortDescription><![CDATA[
  Dispatched from the PlayList when a change has occured
    ]]></shortDescription>
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
               </eventsGenerated>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.EventDispatcher" fullName="flash.events.EventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="interfaces/IMediaPlayer.html"/>
                     <methods>
                        <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                           <params>
                              <param name="ext" type="String"/>
                              <param name="url" type="String"/>
                           </params>
                        </method>
                        <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                           <params>
                              <param name="item" type=""/>
                           </params>
                        </method>
                        <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                           <params>
                              <param name="b" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                           <params>
                              <param name="pos" type="int" default="0"/>
                           </params>
                        </method>
                        <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                           <params>
                              <param name="time" type=""/>
                           </params>
                        </method>
                        <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                           <params>
                              <param name="n" type="Number"/>
                           </params>
                        </method>
                        <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                        </method>
                        <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="TempoLite" fullname="cv:TempoLite/TempoLite" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Constructor. 
   
   This creates a new TempoLite instance.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Constructor.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="players" type="Array" default="null">
                           <description><![CDATA[An array of players to use with TempoLite
   ]]></description>
                        </param>
                        <param name="formats" type="Array" default="null"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="addItem" fullname="cv:TempoLite/addItem" accessLevel="public" result_type="uint" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Add an item to the playlist at the end, or at index specified.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Add an item to the playlist at the end, or at index specified.]]></shortDescription>
                     <versions/>
                     <result type="uint"/>
                     <params>
                        <param name="item" type="">
                           <description><![CDATA[item to be added.
   
   ]]></description>
                        </param>
                        <param name="index" type="int" default="-1">
                           <description><![CDATA[where the item should be added in the playlist.
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[-1
   ]]></default>
                     </customs>
                  </method>
                  <method name="addPlayer" fullname="cv:TempoLite/addPlayer" accessLevel="public" result_type="uint" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Adds a player for use by TempoLite. Which can enable TempoLite to
   handle more types of media.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Adds a player for use by TempoLite.]]></shortDescription>
                     <versions/>
                     <result type="uint"/>
                     <params>
                        <param name="player" type="cv.interfaces:IMediaPlayer">
                           <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="interfaces/IMediaPlayer.html"/>
                           <description><![CDATA[The player to add
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="callPlayersMethod" fullname="cv:TempoLite/protected:callPlayersMethod" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="methodName" type="String"/>
                        <param name="methodValue" type="" default="null"/>
                     </params>
                  </method>
                  <method name="clearItems" fullname="cv:TempoLite/clearItems" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Clears the current playlist.
   ]]></description>
                     <shortDescription><![CDATA[
   Clears the current playlist.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="eventHandler" fullname="cv:TempoLite/protected:eventHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="getItemObject" fullname="cv:TempoLite/protected:getItemObject" accessLevel="protected" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Object"/>
                     <params>
                        <param name="item" type=""/>
                     </params>
                  </method>
                  <method name="getType" fullname="cv:TempoLite/protected:getType" accessLevel="protected" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="isValid" fullname="cv:TempoLite/isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="url" type="String"/>
                     </params>
                  </method>
                  <method name="load" fullname="cv:TempoLite/load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Create a playlist of a single item and load the item.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Create a playlist of a single item and load the item.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="item" type="">
                           <description><![CDATA[The url or the item object to be played.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="loadItem" fullname="cv:TempoLite/protected:loadItem" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="o" type="Object"/>
                     </params>
                  </method>
                  <method name="loadPlayList" fullname="cv:TempoLite/loadPlayList" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a new playlist and clears any previous playlsit.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a new playlist and clears any previous playlsit.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="url" type="String">
                           <description><![CDATA[The path to the playlist file.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="loadedHandler" fullname="cv:TempoLite/protected:loadedHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="metaDataHandler" fullname="cv:TempoLite/protected:metaDataHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="cv.events:MetaDataEvent">
                           <classRef name="MetaDataEvent" fullName="cv.events:MetaDataEvent" packageName="cv.events" relativePath="events/MetaDataEvent.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="next" fullname="cv:TempoLite/next" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the next item in the playlist.
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the next item in the playlist.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onNewPlaylist" fullname="cv:TempoLite/protected:onNewPlaylist" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="pause" fullname="cv:TempoLite/pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Pauses the current playback.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Pauses the current playback.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="b" type="Boolean" default="true">
                           <description><![CDATA[Value to set pause to
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[true
   ]]></default>
                     </customs>
                  </method>
                  <method name="play" fullname="cv:TempoLite/play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays starting at the given position.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays starting at the given position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="pos" type="int" default="0">
                           <description><![CDATA[Position to play from
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   ]]></default>
                     </customs>
                  </method>
                  <method name="playItem" fullname="cv:TempoLite/playItem" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the current item in the playlist, or at the 
   specified index in the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the current item in the playlist, or at the 
   specified index in the playlist.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="index" type="uint" default="0">
                           <description><![CDATA[The index of the item to be played
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   ]]></default>
                     </customs>
                  </method>
                  <method name="playlistHandler" fullname="cv:TempoLite/protected:playlistHandler" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="previous" fullname="cv:TempoLite/previous" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the previous item in the playlist.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the previous item in the playlist.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="cv/TempoLite.html#event:previous" label="previous"/>
                     </sees>
                  </method>
                  <method name="removeItem" fullname="cv:TempoLite/removeItem" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Remove an item from the playlist from the end, or at index specified.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Remove an item from the playlist from the end, or at index specified.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="cv/TempoLite.html#event:refreshPlaylist" label="refreshPlaylist"/>
                     </sees>
                     <params>
                        <param name="index" type="int" default="-1">
                           <description><![CDATA[The index of the item to be removed
   
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[-1
   ]]></default>
                     </customs>
                  </method>
                  <method name="removePlayer" fullname="cv:TempoLite/removePlayer" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Remove a player from TempoLite.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Remove a player from TempoLite.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="player" type="cv.interfaces:IMediaPlayer">
                           <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="interfaces/IMediaPlayer.html"/>
                           <description><![CDATA[The player to be removed.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seek" fullname="cv:TempoLite/seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seek to a specific time (in seconds) in the current item playing.
   Pass a string of the time to seek relative to the current play time.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seek to a specific time (in seconds) in the current item playing.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="time" type="">
                           <description><![CDATA[Specific time to seek to, in seconds
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seekPercent" fullname="cv:TempoLite/seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seek to a specific percent (0 - 1) in the current item playing.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seek to a specific percent (0 - 1) in the current item playing.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="percent" type="Number">
                           <description><![CDATA[Percentage to seek to
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setPlayersProp" fullname="cv:TempoLite/protected:setPlayersProp" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="propName" type="String"/>
                        <param name="propValue" type=""/>
                     </params>
                  </method>
                  <method name="shuffleList" fullname="cv:TempoLite/protected:shuffleList" accessLevel="protected" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="arr" type="cv.data:PlayList">
                           <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="stop" fullname="cv:TempoLite/stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the audio at the specified position. Sets the position given as the pause position.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the audio at the specified position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="stringToTime" fullname="cv:TempoLite/stringToTime" accessLevel="public" result_type="int" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Converts a time in 00:00:000 format and converts it back into a number.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Converts a time in 00:00:000 format and converts it back into a number.]]></shortDescription>
                     <versions/>
                     <result type="int"><![CDATA[The converted number
   ]]></result>
                     <params>
                        <param name="text" type="String">
                           <description><![CDATA[The string to convert
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timeToString" fullname="cv:TempoLite/timeToString" accessLevel="public" result_type="String" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Converts milliseconds to a 00:00:000 format.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Converts milliseconds to a 00:00:000 format.]]></shortDescription>
                     <versions/>
                     <result type="String"><![CDATA[The converted string
   ]]></result>
                     <params>
                        <param name="n" type="int">
                           <description><![CDATA[Milliseconds to convert
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="trace2" fullname="cv:TempoLite/protected:trace2" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="args" type="restParam"/>
                     </params>
                  </method>
                  <method name="unload" fullname="cv:TempoLite/unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unloads the current item playing. 
   ]]></description>
                     <shortDescription><![CDATA[
   Unloads the current item playing.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="updateItem" fullname="cv:TempoLite/updateItem" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Updates a property of an Item in the playlist. This is used in 
   situations where the metadata has been loaded, and the correct 
   duration or title is updated for the playlist display. Dispatches 
   the TempoLite.REFRESH_PLAYLIST event.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Updates a property of an Item in the playlist.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="index" type="uint">
                           <description><![CDATA[ The index of the item to be updated
   ]]></description>
                        </param>
                        <param name="key" type="String">
                           <description><![CDATA[ The property name (length, title, etc)
   ]]></description>
                        </param>
                        <param name="value" type="">
                           <description><![CDATA[The value to update the prop to.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="updateList" fullname="cv:TempoLite/protected:updateList" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="zero" fullname="cv:TempoLite/protected:zero" accessLevel="protected" result_type="String" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <versions/>
                     <result type="String"/>
                     <params>
                        <param name="n" type="int"/>
                        <param name="isMS" type="Boolean" default="false"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="NEW_PLAYLIST" fullname="cv:TempoLite/NEW_PLAYLIST" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="newPlaylist">
                     <versions/>
                  </field>
                  <field name="NEXT" fullname="cv:TempoLite/NEXT" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="next">
                     <versions/>
                  </field>
                  <field name="PREVIOUS" fullname="cv:TempoLite/PREVIOUS" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="prev">
                     <versions/>
                  </field>
                  <field name="REFRESH_PLAYLIST" fullname="cv:TempoLite/REFRESH_PLAYLIST" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="refreshPlaylist">
                     <versions/>
                  </field>
                  <field name="REPEAT_ALL" fullname="cv:TempoLite/REPEAT_ALL" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="all">
                     <versions/>
                  </field>
                  <field name="REPEAT_NONE" fullname="cv:TempoLite/REPEAT_NONE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="none">
                     <versions/>
                  </field>
                  <field name="REPEAT_TRACK" fullname="cv:TempoLite/REPEAT_TRACK" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="track">
                     <versions/>
                  </field>
                  <field name="VERSION" fullname="cv:TempoLite/VERSION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="3.0.2">
                     <description><![CDATA[
         The current version of TempoLite in use.
   ]]></description>
                     <shortDescription><![CDATA[
         The current version of TempoLite in use.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="_autoStart" fullname="cv:TempoLite/protected:_autoStart" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="true">
                     <versions/>
                  </field>
                  <field name="_autoStartIndex" fullname="cv:TempoLite/protected:_autoStartIndex" accessLevel="protected" type="int" isConst="false" isStatic="false" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="_cM" fullname="cv:TempoLite/protected:_cM" accessLevel="protected" type="cv.interfaces:IMediaPlayer" isConst="false" isStatic="false">
                     <classRef name="IMediaPlayer" fullName="cv.interfaces:IMediaPlayer" packageName="cv.interfaces" relativePath="interfaces/IMediaPlayer.html"/>
                     <versions/>
                  </field>
                  <field name="_ext" fullname="cv:TempoLite/protected:_ext" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="_list" fullname="cv:TempoLite/protected:_list" accessLevel="protected" type="cv.data:PlayList" isConst="false" isStatic="false" defaultValue="">
                     <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                     <versions/>
                  </field>
                  <field name="_listShuffled" fullname="cv:TempoLite/protected:_listShuffled" accessLevel="protected" type="cv.data:PlayList" isConst="false" isStatic="false">
                     <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                     <versions/>
                  </field>
                  <field name="_parsers" fullname="cv:TempoLite/protected:_parsers" accessLevel="protected" type="Array" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="_pause" fullname="cv:TempoLite/protected:_pause" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_players" fullname="cv:TempoLite/protected:_players" accessLevel="protected" type="Array" isConst="false" isStatic="false" defaultValue="">
                     <versions/>
                  </field>
                  <field name="_repeat" fullname="cv:TempoLite/protected:_repeat" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_repeatAll" fullname="cv:TempoLite/protected:_repeatAll" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_shuffle" fullname="cv:TempoLite/protected:_shuffle" accessLevel="protected" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <versions/>
                  </field>
                  <field name="_volume" fullname="cv:TempoLite/protected:_volume" accessLevel="protected" type="Number" isConst="false" isStatic="false" defaultValue="0.5">
                     <versions/>
                  </field>
                  <field name="debug" fullname="cv:TempoLite/debug" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
   Enables/Disables debug traces
   ]]></description>
                     <shortDescription><![CDATA[
   Enables/Disables debug traces
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="strRepeat" fullname="cv:TempoLite/protected:strRepeat" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="autoStart" fullname="cv:TempoLite/autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Whether a video will play immediately when a playlist is loaded.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Whether a video will play immediately when a playlist is loaded.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="autoStartIndex" fullname="cv:TempoLite/autoStartIndex/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   If autoStart is true, the index of the item in the playlist to play first.
   ]]></description>
                     <shortDescription><![CDATA[ 
   If autoStart is true, the index of the item in the playlist to play first.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentIndex" fullname="cv:TempoLite/currentIndex/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current index in the playlist.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current index in the playlist.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentItem" fullname="cv:TempoLite/currentItem/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current item playing.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current item playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentPercent" fullname="cv:TempoLite/currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current play progress as a percent.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current play progress as a percent.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="length" fullname="cv:TempoLite/length/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Retrieves the number of items in the playlist.
   ]]></description>
                     <shortDescription><![CDATA[ 
   Retrieves the number of items in the playlist.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="list" fullname="cv:TempoLite/list/get" accessLevel="public" isConst="false" isStatic="false" type="cv.data:PlayList" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current playlist in <code>PlayList</code> format (enhanced array).
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current playlist in <code>PlayList</code> format (enhanced array).]]></shortDescription>
                     <versions/>
                     <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="data/PlayList.html"/>
                  </field>
                  <field name="loadCurrent" fullname="cv:TempoLite/loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current bytes loaded of the current item.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current bytes loaded of the current item.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadTotal" fullname="cv:TempoLite/loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the total bytes to load of the current item.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the total bytes to load of the current item.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="metaData" fullname="cv:TempoLite/metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the metadata from the current item playing if available.
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the metadata from the current item playing if available.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="paused" fullname="cv:TempoLite/paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   If TempoLite is currently paused.
   ]]></description>
                     <shortDescription><![CDATA[ 
   If TempoLite is currently paused.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="repeat" fullname="cv:TempoLite/repeat/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Sets whether repeat is enabled, or which type of repeat is enabled.
   Accepted values are:
   <li>TempoLite.REPEAT_ALL</li>
   <li>TempoLite.REPEAT_TRACK</li>
   <li>TempoLite.REPEAT_NONE</li>
   
   ]]></description>
                     <shortDescription><![CDATA[ 
   Sets whether repeat is enabled, or which type of repeat is enabled.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[TempoLite.REPEAT_NONE
   ]]></default>
                     </customs>
                  </field>
                  <field name="shuffle" fullname="cv:TempoLite/shuffle/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   Whether to shuffle the playlist or not.
      ]]></description>
                     <shortDescription><![CDATA[ 
   Whether to shuffle the playlist or not.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[false
   ]]></default>
                     </customs>
                  </field>
                  <field name="status" fullname="cv:TempoLite/status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read">
                     <description><![CDATA[ 
   Current status of media
   ]]></description>
                     <shortDescription><![CDATA[ 
   Current status of media
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeCurrent" fullname="cv:TempoLite/timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the current play time of the current item playing.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the current play time of the current item playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeLeft" fullname="cv:TempoLite/timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the play time remaining of the current item playing.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the play time remaining of the current item playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeTotal" fullname="cv:TempoLite/timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
   Retrieve the total play time of the current item playing.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Retrieve the total play time of the current item playing.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="volume" fullname="cv:TempoLite/volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[ 
   A number from 0 to 1 determines volume.
      ]]></description>
                     <shortDescription><![CDATA[ 
   A number from 0 to 1 determines volume.]]></shortDescription>
                     <versions/>
                     <customs>
                        <default><![CDATA[0.5
   ]]></default>
                     </customs>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="cv.interfaces">
         <classes>
            <asClass name="IMediaPlayer" type="interface" fullname="cv.interfaces:IMediaPlayer" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.interfaces" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
   Implement the IMediaPlayer interface to create a custom media player. 
   A media player handles audio or video playback.
  ]]></description>
               <shortDescription><![CDATA[
   Implement the IMediaPlayer interface to create a custom media player.]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="TempoLite" fullName="cv:TempoLite" packageName="cv" relativePath="../cv/TempoLite.html"/>
                  <classRef name="RTMPPlayer" fullName="cv.media:RTMPPlayer" packageName="cv.media" relativePath="../media/RTMPPlayer.html"/>
                  <classRef name="SoundPlayer" fullName="cv.media:SoundPlayer" packageName="cv.media" relativePath="../media/SoundPlayer.html"/>
                  <classRef name="ImagePlayer" fullName="cv.media:ImagePlayer" packageName="cv.media" relativePath="../media/ImagePlayer.html"/>
                  <classRef name="NetStreamPlayer" fullName="cv.media:NetStreamPlayer" packageName="cv.media" relativePath="../media/NetStreamPlayer.html"/>
               </implementers>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.IEventDispatcher" fullName="flash.events.IEventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <methods>
                  <method name="isValid" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Validates if the given filetype is compatible to be played with media player. 
      ]]></description>
                     <shortDescription><![CDATA[
   Validates if the given filetype is compatible to be played with media player.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Boolean of whether the extension was valid or not.
   ]]></result>
                     <params>
                        <param name="ext" type="String">
                           <description><![CDATA[The file extension to be validated
   ]]></description>
                        </param>
                        <param name="url" type="String">
                           <description><![CDATA[The full file url if the extension is not enough
   
         ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="load" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:load" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Loads a new file to be played.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Loads a new file to be played.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="cv.events.LoadEvent.LOAD_START"/>
                     </sees>
                     <params>
                        <param name="item" type="">
                           <description><![CDATA[The url of the file to be loaded
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pause" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:pause" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Controls the pause of the audio
   
   ]]></description>
                     <shortDescription><![CDATA[
   Controls the pause of the audio
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="b" type="Boolean" default="true">
                           <description><![CDATA[Whether to pause or not
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[true
   
   ]]></default>
                     </customs>
                  </method>
                  <method name="play" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:play" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Plays the media file, starting at the given position.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Plays the media file, starting at the given position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="pos" type="int" default="0">
                           <description><![CDATA[Position to play from
   ]]></description>
                        </param>
                     </params>
                     <customs>
                        <default><![CDATA[0
   
   ]]></default>
                     </customs>
                  </method>
                  <method name="seek" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seek" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to time given in the media file.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to time given in the media file.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="time" type="">
                           <description><![CDATA[Seconds into the file to seek to
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="seekPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:seekPercent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Seeks to the given percent in the media file.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Seeks to the given percent in the media file.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="n" type="Number">
                           <description><![CDATA[Percent to seek to
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="stop" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:stop" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the media file at the specified position. Sets the position given as the pause position.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the media file at the specified position.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="unload" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:unload" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.
   ]]></description>
                     <shortDescription><![CDATA[
   Stops the media, closes out any connections, and resets the metadata.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="autoStart" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:autoStart/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[
    Whether media will play automatically once loaded.
   ]]></description>
                     <shortDescription><![CDATA[
    Whether media will play automatically once loaded.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="currentPercent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:currentPercent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the play progress percentage of the currently
   playing media file.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the play progress percentage of the currently
   playing media file.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadCurrent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:loadCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the number of bytes currently loaded.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the number of bytes currently loaded.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="loadTotal" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:loadTotal/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the total number of bytes for a given file
   being loaded.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the total number of bytes for a given file
   being loaded.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="metaData" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:metaData/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the meta data object of the current file if available.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the meta data object of the current file if available.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="paused" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:paused/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the pause status of the media player.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the pause status of the media player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="status" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:status/get" accessLevel="public" isConst="false" isStatic="false" type="String" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the loading status of the media player.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the loading status of the media player.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeCurrent" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeCurrent/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the elapsed play time of the current file.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the elapsed play time of the current file.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeLeft" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeLeft/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the remaining play time of the current file.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the remaining play time of the current file.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="timeTotal" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:timeTotal/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
    Gets the total play time of the current file.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets the total play time of the current file.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="volume" fullname="cv.interfaces:IMediaPlayer/cv.interfaces:IMediaPlayer:volume/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[
    Gets or sets the volume of the media player.
   ]]></description>
                     <shortDescription><![CDATA[
    Gets or sets the volume of the media player.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IPlaylistParser" type="interface" fullname="cv.interfaces:IPlaylistParser" accessLevel="public" isFinal="false" isDynamic="false" packageName="cv.interfaces" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <versions/>
               <author/>
               <implementers>
                  <classRef name="PLS" fullName="cv.formats:PLS" packageName="cv.formats" relativePath="../formats/PLS.html"/>
                  <classRef name="XSPF" fullName="cv.formats:XSPF" packageName="cv.formats" relativePath="../formats/XSPF.html"/>
                  <classRef name="B4S" fullName="cv.formats:B4S" packageName="cv.formats" relativePath="../formats/B4S.html"/>
                  <classRef name="ASX" fullName="cv.formats:ASX" packageName="cv.formats" relativePath="../formats/ASX.html"/>
                  <classRef name="M3U" fullName="cv.formats:M3U" packageName="cv.formats" relativePath="../formats/M3U.html"/>
                  <classRef name="ATOM" fullName="cv.formats:ATOM" packageName="cv.formats" relativePath="../formats/ATOM.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="isValid" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:isValid" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="ext" type="String"/>
                        <param name="data" type="String"/>
                     </params>
                  </method>
                  <method name="toPlayList" fullname="cv.interfaces:IPlaylistParser/cv.interfaces:IPlaylistParser:toPlayList" accessLevel="public" result_type="cv.data:PlayList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="cv.data:PlayList">
                        <classRef name="PlayList" fullName="cv.data:PlayList" packageName="cv.data" relativePath="../data/PlayList.html"/>
                     </result>
                     <params>
                        <param name="data" type="String"/>
                     </params>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
   </packages>
</asdoc>